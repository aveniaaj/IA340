{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0f26ef12-6245-454a-9f83-69167740c78d",
   "metadata": {
    "tags": []
   },
   "source": [
    "# CRIME DATA MINIPROJECT\n",
    "ANDREW AVENIA AND LIAM HAAG\n",
    "\n",
    "We got our data from the data catalog source provided by Dr. Wei, the data we are observing is crime rates after 2020\n",
    "\n",
    "The first question we observed was the number of incidents per year between 2020 and 2024\n",
    "The second question we observed was the number of deaths in given years between 2020 and 2024\n",
    "The third question we looked to observe was number of male incidents over time from 2020-2024 for the MALE Population\n",
    "The fourth question we looked to observe was number of female incidents over time from 2020-2024 for the FEMALE population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "77155e66-9cf3-4a36-b125-3b1fd9de37e3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DR_NO</th>\n",
       "      <th>Date Rptd</th>\n",
       "      <th>DATE OCC</th>\n",
       "      <th>TIME OCC</th>\n",
       "      <th>AREA</th>\n",
       "      <th>AREA NAME</th>\n",
       "      <th>Rpt Dist No</th>\n",
       "      <th>Part 1-2</th>\n",
       "      <th>Crm Cd</th>\n",
       "      <th>Crm Cd Desc</th>\n",
       "      <th>...</th>\n",
       "      <th>Status</th>\n",
       "      <th>Status Desc</th>\n",
       "      <th>Crm Cd 1</th>\n",
       "      <th>Crm Cd 2</th>\n",
       "      <th>Crm Cd 3</th>\n",
       "      <th>Crm Cd 4</th>\n",
       "      <th>LOCATION</th>\n",
       "      <th>Cross Street</th>\n",
       "      <th>LAT</th>\n",
       "      <th>LON</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>190326475</td>\n",
       "      <td>03/01/2020 12:00:00 AM</td>\n",
       "      <td>03/01/2020 12:00:00 AM</td>\n",
       "      <td>2130</td>\n",
       "      <td>7</td>\n",
       "      <td>Wilshire</td>\n",
       "      <td>784</td>\n",
       "      <td>1</td>\n",
       "      <td>510</td>\n",
       "      <td>VEHICLE - STOLEN</td>\n",
       "      <td>...</td>\n",
       "      <td>AA</td>\n",
       "      <td>Adult Arrest</td>\n",
       "      <td>510.0</td>\n",
       "      <td>998.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1900 S  LONGWOOD                     AV</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34.0375</td>\n",
       "      <td>-118.3506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>200106753</td>\n",
       "      <td>02/09/2020 12:00:00 AM</td>\n",
       "      <td>02/08/2020 12:00:00 AM</td>\n",
       "      <td>1800</td>\n",
       "      <td>1</td>\n",
       "      <td>Central</td>\n",
       "      <td>182</td>\n",
       "      <td>1</td>\n",
       "      <td>330</td>\n",
       "      <td>BURGLARY FROM VEHICLE</td>\n",
       "      <td>...</td>\n",
       "      <td>IC</td>\n",
       "      <td>Invest Cont</td>\n",
       "      <td>330.0</td>\n",
       "      <td>998.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1000 S  FLOWER                       ST</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34.0444</td>\n",
       "      <td>-118.2628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>200320258</td>\n",
       "      <td>11/11/2020 12:00:00 AM</td>\n",
       "      <td>11/04/2020 12:00:00 AM</td>\n",
       "      <td>1700</td>\n",
       "      <td>3</td>\n",
       "      <td>Southwest</td>\n",
       "      <td>356</td>\n",
       "      <td>1</td>\n",
       "      <td>480</td>\n",
       "      <td>BIKE - STOLEN</td>\n",
       "      <td>...</td>\n",
       "      <td>IC</td>\n",
       "      <td>Invest Cont</td>\n",
       "      <td>480.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1400 W  37TH                         ST</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34.0210</td>\n",
       "      <td>-118.3002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>200907217</td>\n",
       "      <td>05/10/2023 12:00:00 AM</td>\n",
       "      <td>03/10/2020 12:00:00 AM</td>\n",
       "      <td>2037</td>\n",
       "      <td>9</td>\n",
       "      <td>Van Nuys</td>\n",
       "      <td>964</td>\n",
       "      <td>1</td>\n",
       "      <td>343</td>\n",
       "      <td>SHOPLIFTING-GRAND THEFT ($950.01 &amp; OVER)</td>\n",
       "      <td>...</td>\n",
       "      <td>IC</td>\n",
       "      <td>Invest Cont</td>\n",
       "      <td>343.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14000    RIVERSIDE                    DR</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34.1576</td>\n",
       "      <td>-118.4387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>220614831</td>\n",
       "      <td>08/18/2022 12:00:00 AM</td>\n",
       "      <td>08/17/2020 12:00:00 AM</td>\n",
       "      <td>1200</td>\n",
       "      <td>6</td>\n",
       "      <td>Hollywood</td>\n",
       "      <td>666</td>\n",
       "      <td>2</td>\n",
       "      <td>354</td>\n",
       "      <td>THEFT OF IDENTITY</td>\n",
       "      <td>...</td>\n",
       "      <td>IC</td>\n",
       "      <td>Invest Cont</td>\n",
       "      <td>354.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1900    TRANSIENT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34.0944</td>\n",
       "      <td>-118.3277</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       DR_NO               Date Rptd                DATE OCC  TIME OCC  AREA  \\\n",
       "0  190326475  03/01/2020 12:00:00 AM  03/01/2020 12:00:00 AM      2130     7   \n",
       "1  200106753  02/09/2020 12:00:00 AM  02/08/2020 12:00:00 AM      1800     1   \n",
       "2  200320258  11/11/2020 12:00:00 AM  11/04/2020 12:00:00 AM      1700     3   \n",
       "3  200907217  05/10/2023 12:00:00 AM  03/10/2020 12:00:00 AM      2037     9   \n",
       "4  220614831  08/18/2022 12:00:00 AM  08/17/2020 12:00:00 AM      1200     6   \n",
       "\n",
       "   AREA NAME  Rpt Dist No  Part 1-2  Crm Cd  \\\n",
       "0   Wilshire          784         1     510   \n",
       "1    Central          182         1     330   \n",
       "2  Southwest          356         1     480   \n",
       "3   Van Nuys          964         1     343   \n",
       "4  Hollywood          666         2     354   \n",
       "\n",
       "                                Crm Cd Desc  ... Status   Status Desc  \\\n",
       "0                          VEHICLE - STOLEN  ...     AA  Adult Arrest   \n",
       "1                     BURGLARY FROM VEHICLE  ...     IC   Invest Cont   \n",
       "2                             BIKE - STOLEN  ...     IC   Invest Cont   \n",
       "3  SHOPLIFTING-GRAND THEFT ($950.01 & OVER)  ...     IC   Invest Cont   \n",
       "4                         THEFT OF IDENTITY  ...     IC   Invest Cont   \n",
       "\n",
       "  Crm Cd 1 Crm Cd 2  Crm Cd 3 Crm Cd 4  \\\n",
       "0    510.0    998.0       NaN      NaN   \n",
       "1    330.0    998.0       NaN      NaN   \n",
       "2    480.0      NaN       NaN      NaN   \n",
       "3    343.0      NaN       NaN      NaN   \n",
       "4    354.0      NaN       NaN      NaN   \n",
       "\n",
       "                                   LOCATION Cross Street      LAT       LON  \n",
       "0   1900 S  LONGWOOD                     AV          NaN  34.0375 -118.3506  \n",
       "1   1000 S  FLOWER                       ST          NaN  34.0444 -118.2628  \n",
       "2   1400 W  37TH                         ST          NaN  34.0210 -118.3002  \n",
       "3  14000    RIVERSIDE                    DR          NaN  34.1576 -118.4387  \n",
       "4                         1900    TRANSIENT          NaN  34.0944 -118.3277  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "df = pd.read_csv(\"s3://crimedatacsv/Crime_Data_from_2020_to_Present.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "fe1cb526-98a9-4a58-aa26-46652f385af1",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 982638 entries, 0 to 982637\n",
      "Data columns (total 28 columns):\n",
      " #   Column          Non-Null Count   Dtype  \n",
      "---  ------          --------------   -----  \n",
      " 0   DR_NO           982638 non-null  int64  \n",
      " 1   Date Rptd       982638 non-null  object \n",
      " 2   DATE OCC        982638 non-null  object \n",
      " 3   TIME OCC        982638 non-null  int64  \n",
      " 4   AREA            982638 non-null  int64  \n",
      " 5   AREA NAME       982638 non-null  object \n",
      " 6   Rpt Dist No     982638 non-null  int64  \n",
      " 7   Part 1-2        982638 non-null  int64  \n",
      " 8   Crm Cd          982638 non-null  int64  \n",
      " 9   Crm Cd Desc     982638 non-null  object \n",
      " 10  Mocodes         837376 non-null  object \n",
      " 11  Vict Age        982638 non-null  int64  \n",
      " 12  Vict Sex        844193 non-null  object \n",
      " 13  Vict Descent    844182 non-null  object \n",
      " 14  Premis Cd       982624 non-null  float64\n",
      " 15  Premis Desc     982053 non-null  object \n",
      " 16  Weapon Used Cd  326167 non-null  float64\n",
      " 17  Weapon Desc     326167 non-null  object \n",
      " 18  Status          982637 non-null  object \n",
      " 19  Status Desc     982638 non-null  object \n",
      " 20  Crm Cd 1        982627 non-null  float64\n",
      " 21  Crm Cd 2        68875 non-null   float64\n",
      " 22  Crm Cd 3        2311 non-null    float64\n",
      " 23  Crm Cd 4        64 non-null      float64\n",
      " 24  LOCATION        982638 non-null  object \n",
      " 25  Cross Street    151849 non-null  object \n",
      " 26  LAT             982638 non-null  float64\n",
      " 27  LON             982638 non-null  float64\n",
      "dtypes: float64(8), int64(7), object(13)\n",
      "memory usage: 209.9+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info() #show the data types and number of null values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "24e60d48-cfb6-4420-9efa-58de02176779",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DR_NO</th>\n",
       "      <th>TIME OCC</th>\n",
       "      <th>AREA</th>\n",
       "      <th>Rpt Dist No</th>\n",
       "      <th>Part 1-2</th>\n",
       "      <th>Crm Cd</th>\n",
       "      <th>Vict Age</th>\n",
       "      <th>Premis Cd</th>\n",
       "      <th>Weapon Used Cd</th>\n",
       "      <th>Crm Cd 1</th>\n",
       "      <th>Crm Cd 2</th>\n",
       "      <th>Crm Cd 3</th>\n",
       "      <th>Crm Cd 4</th>\n",
       "      <th>LAT</th>\n",
       "      <th>LON</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9.826380e+05</td>\n",
       "      <td>982638.000000</td>\n",
       "      <td>982638.000000</td>\n",
       "      <td>982638.000000</td>\n",
       "      <td>982638.000000</td>\n",
       "      <td>982638.000000</td>\n",
       "      <td>982638.000000</td>\n",
       "      <td>982624.000000</td>\n",
       "      <td>326167.000000</td>\n",
       "      <td>982627.000000</td>\n",
       "      <td>68875.000000</td>\n",
       "      <td>2311.000000</td>\n",
       "      <td>64.00000</td>\n",
       "      <td>982638.000000</td>\n",
       "      <td>982638.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.197437e+08</td>\n",
       "      <td>1338.945426</td>\n",
       "      <td>10.700277</td>\n",
       "      <td>1116.459887</td>\n",
       "      <td>1.404253</td>\n",
       "      <td>500.823555</td>\n",
       "      <td>29.079817</td>\n",
       "      <td>306.133008</td>\n",
       "      <td>363.840882</td>\n",
       "      <td>500.578668</td>\n",
       "      <td>958.167085</td>\n",
       "      <td>984.204673</td>\n",
       "      <td>991.21875</td>\n",
       "      <td>33.995725</td>\n",
       "      <td>-118.082225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.294954e+07</td>\n",
       "      <td>651.537830</td>\n",
       "      <td>6.107808</td>\n",
       "      <td>610.893787</td>\n",
       "      <td>0.490747</td>\n",
       "      <td>206.211940</td>\n",
       "      <td>21.970094</td>\n",
       "      <td>219.053795</td>\n",
       "      <td>123.684663</td>\n",
       "      <td>206.010361</td>\n",
       "      <td>110.232109</td>\n",
       "      <td>51.485644</td>\n",
       "      <td>27.06985</td>\n",
       "      <td>1.636729</td>\n",
       "      <td>5.672940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>8.170000e+02</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>101.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>-4.000000</td>\n",
       "      <td>101.000000</td>\n",
       "      <td>101.000000</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>310.000000</td>\n",
       "      <td>821.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-118.667600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.106089e+08</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>587.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>331.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>101.000000</td>\n",
       "      <td>311.000000</td>\n",
       "      <td>331.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.00000</td>\n",
       "      <td>34.014600</td>\n",
       "      <td>-118.430500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.208146e+08</td>\n",
       "      <td>1420.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>1141.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>442.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>203.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>442.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.00000</td>\n",
       "      <td>34.058900</td>\n",
       "      <td>-118.322500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.309153e+08</td>\n",
       "      <td>1900.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>1617.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>626.000000</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>501.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>626.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.00000</td>\n",
       "      <td>34.164900</td>\n",
       "      <td>-118.273900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.499253e+08</td>\n",
       "      <td>2359.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>2199.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>956.000000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>976.000000</td>\n",
       "      <td>516.000000</td>\n",
       "      <td>956.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>999.00000</td>\n",
       "      <td>34.334300</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              DR_NO       TIME OCC           AREA    Rpt Dist No  \\\n",
       "count  9.826380e+05  982638.000000  982638.000000  982638.000000   \n",
       "mean   2.197437e+08    1338.945426      10.700277    1116.459887   \n",
       "std    1.294954e+07     651.537830       6.107808     610.893787   \n",
       "min    8.170000e+02       1.000000       1.000000     101.000000   \n",
       "25%    2.106089e+08     900.000000       5.000000     587.000000   \n",
       "50%    2.208146e+08    1420.000000      11.000000    1141.000000   \n",
       "75%    2.309153e+08    1900.000000      16.000000    1617.000000   \n",
       "max    2.499253e+08    2359.000000      21.000000    2199.000000   \n",
       "\n",
       "            Part 1-2         Crm Cd       Vict Age      Premis Cd  \\\n",
       "count  982638.000000  982638.000000  982638.000000  982624.000000   \n",
       "mean        1.404253     500.823555      29.079817     306.133008   \n",
       "std         0.490747     206.211940      21.970094     219.053795   \n",
       "min         1.000000     110.000000      -4.000000     101.000000   \n",
       "25%         1.000000     331.000000       0.000000     101.000000   \n",
       "50%         1.000000     442.000000      30.000000     203.000000   \n",
       "75%         2.000000     626.000000      44.000000     501.000000   \n",
       "max         2.000000     956.000000     120.000000     976.000000   \n",
       "\n",
       "       Weapon Used Cd       Crm Cd 1      Crm Cd 2     Crm Cd 3   Crm Cd 4  \\\n",
       "count   326167.000000  982627.000000  68875.000000  2311.000000   64.00000   \n",
       "mean       363.840882     500.578668    958.167085   984.204673  991.21875   \n",
       "std        123.684663     206.010361    110.232109    51.485644   27.06985   \n",
       "min        101.000000     110.000000    210.000000   310.000000  821.00000   \n",
       "25%        311.000000     331.000000    998.000000   998.000000  998.00000   \n",
       "50%        400.000000     442.000000    998.000000   998.000000  998.00000   \n",
       "75%        400.000000     626.000000    998.000000   998.000000  998.00000   \n",
       "max        516.000000     956.000000    999.000000   999.000000  999.00000   \n",
       "\n",
       "                 LAT            LON  \n",
       "count  982638.000000  982638.000000  \n",
       "mean       33.995725    -118.082225  \n",
       "std         1.636729       5.672940  \n",
       "min         0.000000    -118.667600  \n",
       "25%        34.014600    -118.430500  \n",
       "50%        34.058900    -118.322500  \n",
       "75%        34.164900    -118.273900  \n",
       "max        34.334300       0.000000  "
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe() #statistical summary of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "681e42e5-3eeb-42b3-ba3a-9af3edb95be8",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DR_NO                  0\n",
       "Date Rptd              0\n",
       "DATE OCC               0\n",
       "TIME OCC               0\n",
       "AREA                   0\n",
       "AREA NAME              0\n",
       "Rpt Dist No            0\n",
       "Part 1-2               0\n",
       "Crm Cd                 0\n",
       "Crm Cd Desc            0\n",
       "Mocodes           145262\n",
       "Vict Age               0\n",
       "Vict Sex          138445\n",
       "Vict Descent      138456\n",
       "Premis Cd             14\n",
       "Premis Desc          585\n",
       "Weapon Used Cd    656471\n",
       "Weapon Desc       656471\n",
       "Status                 1\n",
       "Status Desc            0\n",
       "Crm Cd 1              11\n",
       "Crm Cd 2          913763\n",
       "Crm Cd 3          980327\n",
       "Crm Cd 4          982574\n",
       "LOCATION               0\n",
       "Cross Street      830789\n",
       "LAT                    0\n",
       "LON                    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum() #show the number of rows containing null value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "0d7e6e77-7a63-49be-b8df-a525f2976228",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: jupyter-ai~=1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (1.15.0)\n",
      "Requirement already satisfied: aiosqlite>=0.18 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai~=1.0) (0.20.0)\n",
      "Requirement already satisfied: dask[distributed] in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai~=1.0) (2024.7.1)\n",
      "Requirement already satisfied: deepmerge>=1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai~=1.0) (2.0)\n",
      "Requirement already satisfied: faiss-cpu in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai~=1.0) (1.9.0)\n",
      "Requirement already satisfied: importlib-metadata>=5.2.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai~=1.0) (6.11.0)\n",
      "Requirement already satisfied: jupyter-ai-magics in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai~=1.0) (2.25.0)\n",
      "Requirement already satisfied: jupyter-server<3,>=1.6 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai~=1.0) (2.14.2)\n",
      "Requirement already satisfied: jupyterlab<4,>=3.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai~=1.0) (3.6.8)\n",
      "Requirement already satisfied: traitlets>=5.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai~=1.0) (5.14.3)\n",
      "Requirement already satisfied: typing-extensions>=4.5.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai~=1.0) (4.12.2)\n",
      "Requirement already satisfied: zipp>=0.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from importlib-metadata>=5.2.0->jupyter-ai~=1.0) (3.19.2)\n",
      "Requirement already satisfied: anyio>=3.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (4.4.0)\n",
      "Requirement already satisfied: argon2-cffi>=21.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (23.1.0)\n",
      "Requirement already satisfied: jinja2>=3.0.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (3.1.4)\n",
      "Requirement already satisfied: jupyter-client>=7.4.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (7.4.9)\n",
      "Requirement already satisfied: jupyter-core!=5.0.*,>=4.12 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (5.7.2)\n",
      "Requirement already satisfied: jupyter-events>=0.9.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (0.10.0)\n",
      "Requirement already satisfied: jupyter-server-terminals>=0.4.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (0.5.3)\n",
      "Requirement already satisfied: nbconvert>=6.4.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (7.16.4)\n",
      "Requirement already satisfied: nbformat>=5.3.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (5.10.4)\n",
      "Requirement already satisfied: overrides>=5.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (7.7.0)\n",
      "Requirement already satisfied: packaging>=22.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (24.1)\n",
      "Requirement already satisfied: prometheus-client>=0.9 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (0.20.0)\n",
      "Requirement already satisfied: pyzmq>=24 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (26.0.3)\n",
      "Requirement already satisfied: send2trash>=1.8.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (1.8.3)\n",
      "Requirement already satisfied: terminado>=0.8.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (0.18.1)\n",
      "Requirement already satisfied: tornado>=6.2.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (6.4.1)\n",
      "Requirement already satisfied: websocket-client>=1.7 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai~=1.0) (1.8.0)\n",
      "Requirement already satisfied: ipython in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab<4,>=3.5->jupyter-ai~=1.0) (8.26.0)\n",
      "Requirement already satisfied: jupyterlab-server~=2.19 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab<4,>=3.5->jupyter-ai~=1.0) (2.27.3)\n",
      "Requirement already satisfied: jupyter-ydoc~=0.2.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.2.5)\n",
      "Requirement already satisfied: jupyter-server-ydoc~=0.8.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.8.0)\n",
      "Requirement already satisfied: nbclassic in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab<4,>=3.5->jupyter-ai~=1.0) (1.1.0)\n",
      "Requirement already satisfied: notebook<7 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab<4,>=3.5->jupyter-ai~=1.0) (6.5.7)\n",
      "Requirement already satisfied: tomli in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab<4,>=3.5->jupyter-ai~=1.0) (2.0.1)\n",
      "Requirement already satisfied: click>=8.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dask[distributed]->jupyter-ai~=1.0) (8.1.7)\n",
      "Requirement already satisfied: cloudpickle>=1.5.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dask[distributed]->jupyter-ai~=1.0) (2.2.1)\n",
      "Requirement already satisfied: fsspec>=2021.09.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dask[distributed]->jupyter-ai~=1.0) (2024.6.1)\n",
      "Requirement already satisfied: partd>=1.4.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dask[distributed]->jupyter-ai~=1.0) (1.4.2)\n",
      "Requirement already satisfied: pyyaml>=5.3.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dask[distributed]->jupyter-ai~=1.0) (6.0.1)\n",
      "Requirement already satisfied: toolz>=0.10.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dask[distributed]->jupyter-ai~=1.0) (0.12.1)\n",
      "Requirement already satisfied: distributed==2024.7.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dask[distributed]->jupyter-ai~=1.0) (2024.7.1)\n",
      "Requirement already satisfied: locket>=1.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from distributed==2024.7.1->dask[distributed]->jupyter-ai~=1.0) (1.0.0)\n",
      "Requirement already satisfied: msgpack>=1.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from distributed==2024.7.1->dask[distributed]->jupyter-ai~=1.0) (1.0.8)\n",
      "Requirement already satisfied: psutil>=5.7.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from distributed==2024.7.1->dask[distributed]->jupyter-ai~=1.0) (6.0.0)\n",
      "Requirement already satisfied: sortedcontainers>=2.0.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from distributed==2024.7.1->dask[distributed]->jupyter-ai~=1.0) (2.4.0)\n",
      "Requirement already satisfied: tblib>=1.6.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from distributed==2024.7.1->dask[distributed]->jupyter-ai~=1.0) (3.0.0)\n",
      "Requirement already satisfied: urllib3>=1.24.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from distributed==2024.7.1->dask[distributed]->jupyter-ai~=1.0) (2.2.2)\n",
      "Requirement already satisfied: zict>=3.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from distributed==2024.7.1->dask[distributed]->jupyter-ai~=1.0) (3.0.0)\n",
      "Requirement already satisfied: numpy<3.0,>=1.25.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from faiss-cpu->jupyter-ai~=1.0) (1.26.4)\n",
      "Requirement already satisfied: jsonpath-ng<2,>=1.5.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics->jupyter-ai~=1.0) (1.7.0)\n",
      "Requirement already satisfied: langchain-community<0.3.0,>=0.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics->jupyter-ai~=1.0) (0.2.17)\n",
      "Requirement already satisfied: langchain<0.3.0,>=0.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics->jupyter-ai~=1.0) (0.2.16)\n",
      "Requirement already satisfied: idna>=2.8 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from anyio>=3.1.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (3.7)\n",
      "Requirement already satisfied: sniffio>=1.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from anyio>=3.1.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (1.3.1)\n",
      "Requirement already satisfied: exceptiongroup>=1.0.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from anyio>=3.1.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (1.2.2)\n",
      "Requirement already satisfied: argon2-cffi-bindings in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from argon2-cffi>=21.1->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (21.2.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jinja2>=3.0.3->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (2.1.5)\n",
      "Requirement already satisfied: ply in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonpath-ng<2,>=1.5.3->jupyter-ai-magics->jupyter-ai~=1.0) (3.11)\n",
      "Requirement already satisfied: entrypoints in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-client>=7.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (0.4)\n",
      "Requirement already satisfied: nest-asyncio>=1.5.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-client>=7.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (1.6.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-client>=7.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (2.9.0)\n",
      "Requirement already satisfied: platformdirs>=2.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-core!=5.0.*,>=4.12->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (4.2.2)\n",
      "Requirement already satisfied: jsonschema>=4.18.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (4.23.0)\n",
      "Requirement already satisfied: python-json-logger>=2.0.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (2.0.7)\n",
      "Requirement already satisfied: referencing in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (0.35.1)\n",
      "Requirement already satisfied: rfc3339-validator in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (0.1.4)\n",
      "Requirement already satisfied: rfc3986-validator>=0.1.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (0.1.1)\n",
      "Requirement already satisfied: jupyter-server-fileid<1,>=0.6.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server-ydoc~=0.8.0->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.9.3)\n",
      "Requirement already satisfied: ypy-websocket<0.9.0,>=0.8.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server-ydoc~=0.8.0->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.8.4)\n",
      "Requirement already satisfied: y-py<0.7.0,>=0.6.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ydoc~=0.2.4->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.6.2)\n",
      "Requirement already satisfied: babel>=2.10 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab-server~=2.19->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (2.14.0)\n",
      "Requirement already satisfied: json5>=0.9.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab-server~=2.19->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.9.25)\n",
      "Requirement already satisfied: requests>=2.31 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab-server~=2.19->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (2.32.3)\n",
      "Requirement already satisfied: SQLAlchemy<3,>=1.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (2.0.31)\n",
      "Requirement already satisfied: aiohttp<4.0.0,>=3.8.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (3.9.5)\n",
      "Requirement already satisfied: async-timeout<5.0.0,>=4.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (4.0.3)\n",
      "Requirement already satisfied: langchain-core<0.3.0,>=0.2.38 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (0.2.41)\n",
      "Requirement already satisfied: langchain-text-splitters<0.3.0,>=0.2.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (0.2.4)\n",
      "Requirement already satisfied: langsmith<0.2.0,>=0.1.17 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (0.1.135)\n",
      "Requirement already satisfied: pydantic<3,>=1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (2.9.1)\n",
      "Requirement already satisfied: tenacity!=8.4.0,<9.0.0,>=8.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (8.5.0)\n",
      "Requirement already satisfied: dataclasses-json<0.7,>=0.5.7 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-community<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (0.6.7)\n",
      "Requirement already satisfied: beautifulsoup4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (4.12.3)\n",
      "Requirement already satisfied: bleach!=5.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (6.1.0)\n",
      "Requirement already satisfied: defusedxml in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (0.7.1)\n",
      "Requirement already satisfied: jupyterlab-pygments in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (0.3.0)\n",
      "Requirement already satisfied: mistune<4,>=2.0.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (3.0.2)\n",
      "Requirement already satisfied: nbclient>=0.5.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (0.10.0)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (1.5.0)\n",
      "Requirement already satisfied: pygments>=2.4.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (2.18.0)\n",
      "Requirement already satisfied: tinycss2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (1.3.0)\n",
      "Requirement already satisfied: fastjsonschema>=2.15 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbformat>=5.3.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (2.20.0)\n",
      "Requirement already satisfied: ipython-genutils in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from notebook<7->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.2.0)\n",
      "Requirement already satisfied: ipykernel in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from notebook<7->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (6.29.5)\n",
      "Requirement already satisfied: notebook-shim>=0.2.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbclassic->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.2.4)\n",
      "Requirement already satisfied: ptyprocess in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from terminado>=0.8.3->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (0.7.0)\n",
      "Requirement already satisfied: decorator in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipython->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (5.1.1)\n",
      "Requirement already satisfied: jedi>=0.16 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipython->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.18.2)\n",
      "Requirement already satisfied: matplotlib-inline in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipython->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.1.7)\n",
      "Requirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipython->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (3.0.47)\n",
      "Requirement already satisfied: stack-data in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipython->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.6.2)\n",
      "Requirement already satisfied: pexpect>4.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipython->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (4.9.0)\n",
      "Requirement already satisfied: aiosignal>=1.1.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (1.3.1)\n",
      "Requirement already satisfied: attrs>=17.3.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (23.2.0)\n",
      "Requirement already satisfied: frozenlist>=1.1.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (1.4.1)\n",
      "Requirement already satisfied: multidict<7.0,>=4.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (6.0.5)\n",
      "Requirement already satisfied: yarl<2.0,>=1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (1.9.4)\n",
      "Requirement already satisfied: six>=1.9.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from bleach!=5.0.0->nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (1.16.0)\n",
      "Requirement already satisfied: webencodings in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from bleach!=5.0.0->nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (0.5.1)\n",
      "Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dataclasses-json<0.7,>=0.5.7->langchain-community<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (3.22.0)\n",
      "Requirement already satisfied: typing-inspect<1,>=0.4.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dataclasses-json<0.7,>=0.5.7->langchain-community<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (0.9.0)\n",
      "Requirement already satisfied: parso<0.9.0,>=0.8.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jedi>=0.16->ipython->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.8.4)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema>=4.18.0->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (2023.12.1)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema>=4.18.0->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (0.19.1)\n",
      "Requirement already satisfied: fqdn in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (1.5.1)\n",
      "Requirement already satisfied: isoduration in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (20.11.0)\n",
      "Requirement already satisfied: jsonpointer>1.13 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (3.0.0)\n",
      "Requirement already satisfied: uri-template in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (1.3.0)\n",
      "Requirement already satisfied: webcolors>=24.6.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (24.6.0)\n",
      "Requirement already satisfied: jsonpatch<2.0,>=1.33 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-core<0.3.0,>=0.2.38->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (1.33)\n",
      "Requirement already satisfied: httpx<1,>=0.23.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langsmith<0.2.0,>=0.1.17->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (0.27.0)\n",
      "Requirement already satisfied: orjson<4.0.0,>=3.9.14 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langsmith<0.2.0,>=0.1.17->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (3.10.7)\n",
      "Requirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langsmith<0.2.0,>=0.1.17->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (1.0.0)\n",
      "Requirement already satisfied: wcwidth in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.2.13)\n",
      "Requirement already satisfied: annotated-types>=0.6.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from pydantic<3,>=1->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (0.7.0)\n",
      "Requirement already satisfied: pydantic-core==2.23.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from pydantic<3,>=1->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (2.23.3)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from requests>=2.31->jupyterlab-server~=2.19->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (3.3.2)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from requests>=2.31->jupyterlab-server~=2.19->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (2024.7.4)\n",
      "Requirement already satisfied: greenlet!=0.4.17 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from SQLAlchemy<3,>=1.4->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (3.0.3)\n",
      "Requirement already satisfied: aiofiles<23,>=22.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ypy-websocket<0.9.0,>=0.8.2->jupyter-server-ydoc~=0.8.0->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (22.1.0)\n",
      "Requirement already satisfied: cffi>=1.0.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from argon2-cffi-bindings->argon2-cffi>=21.1->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (1.16.0)\n",
      "Requirement already satisfied: soupsieve>1.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from beautifulsoup4->nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (2.5)\n",
      "Requirement already satisfied: comm>=0.1.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipykernel->notebook<7->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.2.2)\n",
      "Requirement already satisfied: debugpy>=1.6.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipykernel->notebook<7->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (1.8.2)\n",
      "Requirement already satisfied: executing>=1.2.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from stack-data->ipython->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (2.0.1)\n",
      "Requirement already satisfied: asttokens>=2.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from stack-data->ipython->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (2.4.1)\n",
      "Requirement already satisfied: pure-eval in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from stack-data->ipython->jupyterlab<4,>=3.5->jupyter-ai~=1.0) (0.2.3)\n",
      "Requirement already satisfied: pycparser in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi>=21.1->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (2.22)\n",
      "Requirement already satisfied: httpcore==1.* in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from httpx<1,>=0.23.0->langsmith<0.2.0,>=0.1.17->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (1.0.5)\n",
      "Requirement already satisfied: h11<0.15,>=0.13 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from httpcore==1.*->httpx<1,>=0.23.0->langsmith<0.2.0,>=0.1.17->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (0.14.0)\n",
      "Requirement already satisfied: mypy-extensions>=0.3.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from typing-inspect<1,>=0.4.0->dataclasses-json<0.7,>=0.5.7->langchain-community<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai~=1.0) (1.0.0)\n",
      "Requirement already satisfied: arrow>=0.15.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from isoduration->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (1.3.0)\n",
      "Requirement already satisfied: types-python-dateutil>=2.8.10 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from arrow>=0.15.0->isoduration->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai~=1.0) (2.9.0.20240316)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install jupyter-ai~=1.0 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "7cf92312-304a-4893-a979-61924463fc31",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: jupyter-ai[all] in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (1.15.0)\n",
      "Requirement already satisfied: aiosqlite>=0.18 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai[all]) (0.20.0)\n",
      "Requirement already satisfied: dask[distributed] in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai[all]) (2024.7.1)\n",
      "Requirement already satisfied: deepmerge>=1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai[all]) (2.0)\n",
      "Requirement already satisfied: faiss-cpu in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai[all]) (1.9.0)\n",
      "Requirement already satisfied: importlib-metadata>=5.2.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai[all]) (6.11.0)\n",
      "Requirement already satisfied: jupyter-ai-magics in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai[all]) (2.25.0)\n",
      "Requirement already satisfied: jupyter-server<3,>=1.6 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai[all]) (2.14.2)\n",
      "Requirement already satisfied: jupyterlab<4,>=3.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai[all]) (3.6.8)\n",
      "Requirement already satisfied: traitlets>=5.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai[all]) (5.14.3)\n",
      "Requirement already satisfied: typing-extensions>=4.5.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai[all]) (4.12.2)\n",
      "Requirement already satisfied: pypdf in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai[all]) (5.0.1)\n",
      "Requirement already satisfied: zipp>=0.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from importlib-metadata>=5.2.0->jupyter-ai[all]) (3.19.2)\n",
      "Requirement already satisfied: anyio>=3.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (4.4.0)\n",
      "Requirement already satisfied: argon2-cffi>=21.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (23.1.0)\n",
      "Requirement already satisfied: jinja2>=3.0.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (3.1.4)\n",
      "Requirement already satisfied: jupyter-client>=7.4.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (7.4.9)\n",
      "Requirement already satisfied: jupyter-core!=5.0.*,>=4.12 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (5.7.2)\n",
      "Requirement already satisfied: jupyter-events>=0.9.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (0.10.0)\n",
      "Requirement already satisfied: jupyter-server-terminals>=0.4.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (0.5.3)\n",
      "Requirement already satisfied: nbconvert>=6.4.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (7.16.4)\n",
      "Requirement already satisfied: nbformat>=5.3.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (5.10.4)\n",
      "Requirement already satisfied: overrides>=5.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (7.7.0)\n",
      "Requirement already satisfied: packaging>=22.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (24.1)\n",
      "Requirement already satisfied: prometheus-client>=0.9 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (0.20.0)\n",
      "Requirement already satisfied: pyzmq>=24 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (26.0.3)\n",
      "Requirement already satisfied: send2trash>=1.8.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (1.8.3)\n",
      "Requirement already satisfied: terminado>=0.8.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (0.18.1)\n",
      "Requirement already satisfied: tornado>=6.2.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (6.4.1)\n",
      "Requirement already satisfied: websocket-client>=1.7 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server<3,>=1.6->jupyter-ai[all]) (1.8.0)\n",
      "Requirement already satisfied: ipython in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab<4,>=3.5->jupyter-ai[all]) (8.26.0)\n",
      "Requirement already satisfied: jupyterlab-server~=2.19 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab<4,>=3.5->jupyter-ai[all]) (2.27.3)\n",
      "Requirement already satisfied: jupyter-ydoc~=0.2.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab<4,>=3.5->jupyter-ai[all]) (0.2.5)\n",
      "Requirement already satisfied: jupyter-server-ydoc~=0.8.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab<4,>=3.5->jupyter-ai[all]) (0.8.0)\n",
      "Requirement already satisfied: nbclassic in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab<4,>=3.5->jupyter-ai[all]) (1.1.0)\n",
      "Requirement already satisfied: notebook<7 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab<4,>=3.5->jupyter-ai[all]) (6.5.7)\n",
      "Requirement already satisfied: tomli in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab<4,>=3.5->jupyter-ai[all]) (2.0.1)\n",
      "Requirement already satisfied: click>=8.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dask[distributed]->jupyter-ai[all]) (8.1.7)\n",
      "Requirement already satisfied: cloudpickle>=1.5.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dask[distributed]->jupyter-ai[all]) (2.2.1)\n",
      "Requirement already satisfied: fsspec>=2021.09.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dask[distributed]->jupyter-ai[all]) (2024.6.1)\n",
      "Requirement already satisfied: partd>=1.4.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dask[distributed]->jupyter-ai[all]) (1.4.2)\n",
      "Requirement already satisfied: pyyaml>=5.3.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dask[distributed]->jupyter-ai[all]) (6.0.1)\n",
      "Requirement already satisfied: toolz>=0.10.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dask[distributed]->jupyter-ai[all]) (0.12.1)\n",
      "Requirement already satisfied: distributed==2024.7.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dask[distributed]->jupyter-ai[all]) (2024.7.1)\n",
      "Requirement already satisfied: locket>=1.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from distributed==2024.7.1->dask[distributed]->jupyter-ai[all]) (1.0.0)\n",
      "Requirement already satisfied: msgpack>=1.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from distributed==2024.7.1->dask[distributed]->jupyter-ai[all]) (1.0.8)\n",
      "Requirement already satisfied: psutil>=5.7.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from distributed==2024.7.1->dask[distributed]->jupyter-ai[all]) (6.0.0)\n",
      "Requirement already satisfied: sortedcontainers>=2.0.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from distributed==2024.7.1->dask[distributed]->jupyter-ai[all]) (2.4.0)\n",
      "Requirement already satisfied: tblib>=1.6.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from distributed==2024.7.1->dask[distributed]->jupyter-ai[all]) (3.0.0)\n",
      "Requirement already satisfied: urllib3>=1.24.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from distributed==2024.7.1->dask[distributed]->jupyter-ai[all]) (2.2.2)\n",
      "Requirement already satisfied: zict>=3.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from distributed==2024.7.1->dask[distributed]->jupyter-ai[all]) (3.0.0)\n",
      "Requirement already satisfied: numpy<3.0,>=1.25.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from faiss-cpu->jupyter-ai[all]) (1.26.4)\n",
      "Requirement already satisfied: jsonpath-ng<2,>=1.5.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics->jupyter-ai[all]) (1.7.0)\n",
      "Requirement already satisfied: langchain-community<0.3.0,>=0.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics->jupyter-ai[all]) (0.2.17)\n",
      "Requirement already satisfied: langchain<0.3.0,>=0.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics->jupyter-ai[all]) (0.2.16)\n",
      "Requirement already satisfied: ai21 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2.15.1)\n",
      "Requirement already satisfied: boto3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.34.162)\n",
      "Requirement already satisfied: gpt4all in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2.8.2)\n",
      "Requirement already satisfied: huggingface-hub in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.25.2)\n",
      "Requirement already satisfied: ipywidgets in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (8.1.3)\n",
      "Requirement already satisfied: langchain-anthropic in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.1.23)\n",
      "Requirement already satisfied: langchain-aws in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.1.18)\n",
      "Requirement already satisfied: langchain-cohere in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.2.4)\n",
      "Requirement already satisfied: langchain-google-genai in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.0.10)\n",
      "Requirement already satisfied: langchain-mistralai in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.1.13)\n",
      "Requirement already satisfied: langchain-nvidia-ai-endpoints in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.2.2)\n",
      "Requirement already satisfied: langchain-ollama in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.1.3)\n",
      "Requirement already satisfied: langchain-openai in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.1.25)\n",
      "Requirement already satisfied: pillow in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (10.4.0)\n",
      "Requirement already satisfied: qianfan in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.4.10.1)\n",
      "Requirement already satisfied: together in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.3.1)\n",
      "Requirement already satisfied: idna>=2.8 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from anyio>=3.1.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (3.7)\n",
      "Requirement already satisfied: sniffio>=1.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from anyio>=3.1.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (1.3.1)\n",
      "Requirement already satisfied: exceptiongroup>=1.0.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from anyio>=3.1.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (1.2.2)\n",
      "Requirement already satisfied: argon2-cffi-bindings in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from argon2-cffi>=21.1->jupyter-server<3,>=1.6->jupyter-ai[all]) (21.2.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jinja2>=3.0.3->jupyter-server<3,>=1.6->jupyter-ai[all]) (2.1.5)\n",
      "Requirement already satisfied: ply in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonpath-ng<2,>=1.5.3->jupyter-ai-magics->jupyter-ai[all]) (3.11)\n",
      "Requirement already satisfied: entrypoints in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-client>=7.4.4->jupyter-server<3,>=1.6->jupyter-ai[all]) (0.4)\n",
      "Requirement already satisfied: nest-asyncio>=1.5.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-client>=7.4.4->jupyter-server<3,>=1.6->jupyter-ai[all]) (1.6.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-client>=7.4.4->jupyter-server<3,>=1.6->jupyter-ai[all]) (2.9.0)\n",
      "Requirement already satisfied: platformdirs>=2.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-core!=5.0.*,>=4.12->jupyter-server<3,>=1.6->jupyter-ai[all]) (4.2.2)\n",
      "Requirement already satisfied: jsonschema>=4.18.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (4.23.0)\n",
      "Requirement already satisfied: python-json-logger>=2.0.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (2.0.7)\n",
      "Requirement already satisfied: referencing in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (0.35.1)\n",
      "Requirement already satisfied: rfc3339-validator in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (0.1.4)\n",
      "Requirement already satisfied: rfc3986-validator>=0.1.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (0.1.1)\n",
      "Requirement already satisfied: jupyter-server-fileid<1,>=0.6.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server-ydoc~=0.8.0->jupyterlab<4,>=3.5->jupyter-ai[all]) (0.9.3)\n",
      "Requirement already satisfied: ypy-websocket<0.9.0,>=0.8.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-server-ydoc~=0.8.0->jupyterlab<4,>=3.5->jupyter-ai[all]) (0.8.4)\n",
      "Requirement already satisfied: y-py<0.7.0,>=0.6.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyter-ydoc~=0.2.4->jupyterlab<4,>=3.5->jupyter-ai[all]) (0.6.2)\n",
      "Requirement already satisfied: babel>=2.10 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab-server~=2.19->jupyterlab<4,>=3.5->jupyter-ai[all]) (2.14.0)\n",
      "Requirement already satisfied: json5>=0.9.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab-server~=2.19->jupyterlab<4,>=3.5->jupyter-ai[all]) (0.9.25)\n",
      "Requirement already satisfied: requests>=2.31 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jupyterlab-server~=2.19->jupyterlab<4,>=3.5->jupyter-ai[all]) (2.32.3)\n",
      "Requirement already satisfied: SQLAlchemy<3,>=1.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (2.0.31)\n",
      "Requirement already satisfied: aiohttp<4.0.0,>=3.8.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (3.9.5)\n",
      "Requirement already satisfied: async-timeout<5.0.0,>=4.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (4.0.3)\n",
      "Requirement already satisfied: langchain-core<0.3.0,>=0.2.38 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (0.2.41)\n",
      "Requirement already satisfied: langchain-text-splitters<0.3.0,>=0.2.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (0.2.4)\n",
      "Requirement already satisfied: langsmith<0.2.0,>=0.1.17 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (0.1.135)\n",
      "Requirement already satisfied: pydantic<3,>=1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (2.9.1)\n",
      "Requirement already satisfied: tenacity!=8.4.0,<9.0.0,>=8.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (8.5.0)\n",
      "Requirement already satisfied: dataclasses-json<0.7,>=0.5.7 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-community<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (0.6.7)\n",
      "Requirement already satisfied: beautifulsoup4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai[all]) (4.12.3)\n",
      "Requirement already satisfied: bleach!=5.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai[all]) (6.1.0)\n",
      "Requirement already satisfied: defusedxml in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai[all]) (0.7.1)\n",
      "Requirement already satisfied: jupyterlab-pygments in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai[all]) (0.3.0)\n",
      "Requirement already satisfied: mistune<4,>=2.0.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai[all]) (3.0.2)\n",
      "Requirement already satisfied: nbclient>=0.5.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai[all]) (0.10.0)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai[all]) (1.5.0)\n",
      "Requirement already satisfied: pygments>=2.4.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai[all]) (2.18.0)\n",
      "Requirement already satisfied: tinycss2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai[all]) (1.3.0)\n",
      "Requirement already satisfied: fastjsonschema>=2.15 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbformat>=5.3.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (2.20.0)\n",
      "Requirement already satisfied: ipython-genutils in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from notebook<7->jupyterlab<4,>=3.5->jupyter-ai[all]) (0.2.0)\n",
      "Requirement already satisfied: ipykernel in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from notebook<7->jupyterlab<4,>=3.5->jupyter-ai[all]) (6.29.5)\n",
      "Requirement already satisfied: notebook-shim>=0.2.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from nbclassic->jupyterlab<4,>=3.5->jupyter-ai[all]) (0.2.4)\n",
      "Requirement already satisfied: ptyprocess in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from terminado>=0.8.3->jupyter-server<3,>=1.6->jupyter-ai[all]) (0.7.0)\n",
      "Requirement already satisfied: ai21-tokenizer<1.0.0,>=0.12.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ai21->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.12.0)\n",
      "Requirement already satisfied: httpx<0.28.0,>=0.27.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ai21->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.27.0)\n",
      "Requirement already satisfied: botocore<1.35.0,>=1.34.162 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from boto3->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.34.162)\n",
      "Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from boto3->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.0.1)\n",
      "Requirement already satisfied: s3transfer<0.11.0,>=0.10.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from boto3->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.10.2)\n",
      "Requirement already satisfied: tqdm in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from gpt4all->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (4.66.4)\n",
      "Requirement already satisfied: filelock in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from huggingface-hub->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (3.15.4)\n",
      "Requirement already satisfied: decorator in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipython->jupyterlab<4,>=3.5->jupyter-ai[all]) (5.1.1)\n",
      "Requirement already satisfied: jedi>=0.16 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipython->jupyterlab<4,>=3.5->jupyter-ai[all]) (0.18.2)\n",
      "Requirement already satisfied: matplotlib-inline in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipython->jupyterlab<4,>=3.5->jupyter-ai[all]) (0.1.7)\n",
      "Requirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipython->jupyterlab<4,>=3.5->jupyter-ai[all]) (3.0.47)\n",
      "Requirement already satisfied: stack-data in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipython->jupyterlab<4,>=3.5->jupyter-ai[all]) (0.6.2)\n",
      "Requirement already satisfied: pexpect>4.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipython->jupyterlab<4,>=3.5->jupyter-ai[all]) (4.9.0)\n",
      "Requirement already satisfied: comm>=0.1.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipywidgets->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.2.2)\n",
      "Requirement already satisfied: widgetsnbextension~=4.0.11 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipywidgets->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (4.0.11)\n",
      "Requirement already satisfied: jupyterlab-widgets~=3.0.11 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipywidgets->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (3.0.11)\n",
      "Requirement already satisfied: anthropic<1,>=0.30.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-anthropic->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.36.0)\n",
      "Requirement already satisfied: cohere<6.0,>=5.5.6 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (5.11.0)\n",
      "Requirement already satisfied: langchain-experimental>=0.0.6 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.0.65)\n",
      "Requirement already satisfied: pandas>=1.4.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2.2.2)\n",
      "Requirement already satisfied: tabulate<0.10.0,>=0.9.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.9.0)\n",
      "Requirement already satisfied: google-generativeai<0.8.0,>=0.7.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.7.2)\n",
      "Requirement already satisfied: httpx-sse<1,>=0.3.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-mistralai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.4.0)\n",
      "Requirement already satisfied: tokenizers<1,>=0.15.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-mistralai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.20.1)\n",
      "Requirement already satisfied: ollama<1,>=0.3.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-ollama->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.3.3)\n",
      "Requirement already satisfied: openai<2.0.0,>=1.40.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-openai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.51.2)\n",
      "Requirement already satisfied: tiktoken<1,>=0.7 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-openai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.8.0)\n",
      "Requirement already satisfied: aiolimiter>=1.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.1.0)\n",
      "Requirement already satisfied: bce-python-sdk>=0.8.79 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.9.23)\n",
      "Requirement already satisfied: cachetools>=5.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (5.5.0)\n",
      "Requirement already satisfied: diskcache>=5.6.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (5.6.3)\n",
      "Requirement already satisfied: multiprocess>=0.70.12 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.70.16)\n",
      "Requirement already satisfied: python-dotenv>=1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.0.1)\n",
      "Requirement already satisfied: rich>=13.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (13.9.2)\n",
      "Requirement already satisfied: typer>=0.9.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.12.5)\n",
      "Requirement already satisfied: eval-type-backport<0.3.0,>=0.1.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from together->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.2.0)\n",
      "Requirement already satisfied: pyarrow>=10.0.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from together->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (17.0.0)\n",
      "Requirement already satisfied: sentencepiece<1.0.0,>=0.2.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ai21-tokenizer<1.0.0,>=0.12.0->ai21->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.2.0)\n",
      "Requirement already satisfied: aiosignal>=1.1.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (1.3.1)\n",
      "Requirement already satisfied: attrs>=17.3.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (23.2.0)\n",
      "Requirement already satisfied: frozenlist>=1.1.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (1.4.1)\n",
      "Requirement already satisfied: multidict<7.0,>=4.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (6.0.5)\n",
      "Requirement already satisfied: yarl<2.0,>=1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (1.9.4)\n",
      "Requirement already satisfied: distro<2,>=1.7.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from anthropic<1,>=0.30.0->langchain-anthropic->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.9.0)\n",
      "Requirement already satisfied: jiter<1,>=0.4.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from anthropic<1,>=0.30.0->langchain-anthropic->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.6.1)\n",
      "Requirement already satisfied: pycryptodome>=3.8.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from bce-python-sdk>=0.8.79->qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (3.20.0)\n",
      "Requirement already satisfied: future>=0.6.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from bce-python-sdk>=0.8.79->qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.0.0)\n",
      "Requirement already satisfied: six>=1.4.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from bce-python-sdk>=0.8.79->qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.16.0)\n",
      "Requirement already satisfied: webencodings in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from bleach!=5.0.0->nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai[all]) (0.5.1)\n",
      "Requirement already satisfied: fastavro<2.0.0,>=1.9.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.9.7)\n",
      "Requirement already satisfied: parameterized<0.10.0,>=0.9.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.9.0)\n",
      "Requirement already satisfied: pydantic-core<3.0.0,>=2.18.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2.23.3)\n",
      "Requirement already satisfied: sagemaker<3.0.0,>=2.232.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2.232.2)\n",
      "Requirement already satisfied: types-requests<3.0.0,>=2.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2.32.0.20240914)\n",
      "Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dataclasses-json<0.7,>=0.5.7->langchain-community<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (3.22.0)\n",
      "Requirement already satisfied: typing-inspect<1,>=0.4.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from dataclasses-json<0.7,>=0.5.7->langchain-community<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (0.9.0)\n",
      "Requirement already satisfied: google-ai-generativelanguage==0.6.6 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.6.6)\n",
      "Requirement already satisfied: google-api-core in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2.21.0)\n",
      "Requirement already satisfied: google-api-python-client in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2.149.0)\n",
      "Requirement already satisfied: google-auth>=2.15.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2.35.0)\n",
      "Requirement already satisfied: protobuf in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (4.25.4)\n",
      "Requirement already satisfied: proto-plus<2.0.0dev,>=1.22.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from google-ai-generativelanguage==0.6.6->google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.24.0)\n",
      "Requirement already satisfied: certifi in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from httpx<0.28.0,>=0.27.0->ai21->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2024.7.4)\n",
      "Requirement already satisfied: httpcore==1.* in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from httpx<0.28.0,>=0.27.0->ai21->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.0.5)\n",
      "Requirement already satisfied: h11<0.15,>=0.13 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from httpcore==1.*->httpx<0.28.0,>=0.27.0->ai21->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.14.0)\n",
      "Requirement already satisfied: parso<0.9.0,>=0.8.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jedi>=0.16->ipython->jupyterlab<4,>=3.5->jupyter-ai[all]) (0.8.4)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema>=4.18.0->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (2023.12.1)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema>=4.18.0->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (0.19.1)\n",
      "Requirement already satisfied: fqdn in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (1.5.1)\n",
      "Requirement already satisfied: isoduration in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (20.11.0)\n",
      "Requirement already satisfied: jsonpointer>1.13 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (3.0.0)\n",
      "Requirement already satisfied: uri-template in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (1.3.0)\n",
      "Requirement already satisfied: webcolors>=24.6.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (24.6.0)\n",
      "Requirement already satisfied: jsonpatch<2.0,>=1.33 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langchain-core<0.3.0,>=0.2.38->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (1.33)\n",
      "Requirement already satisfied: orjson<4.0.0,>=3.9.14 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langsmith<0.2.0,>=0.1.17->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (3.10.7)\n",
      "Requirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from langsmith<0.2.0,>=0.1.17->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (1.0.0)\n",
      "Requirement already satisfied: dill>=0.3.8 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from multiprocess>=0.70.12->qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.3.8)\n",
      "Requirement already satisfied: pytz>=2020.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from pandas>=1.4.3->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from pandas>=1.4.3->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2024.1)\n",
      "Requirement already satisfied: wcwidth in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython->jupyterlab<4,>=3.5->jupyter-ai[all]) (0.2.13)\n",
      "Requirement already satisfied: annotated-types>=0.6.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from pydantic<3,>=1->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (0.7.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from requests>=2.31->jupyterlab-server~=2.19->jupyterlab<4,>=3.5->jupyter-ai[all]) (3.3.2)\n",
      "Requirement already satisfied: markdown-it-py>=2.2.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from rich>=13.0.0->qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (3.0.0)\n",
      "Requirement already satisfied: greenlet!=0.4.17 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from SQLAlchemy<3,>=1.4->langchain<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (3.0.3)\n",
      "Requirement already satisfied: regex>=2022.1.18 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from tiktoken<1,>=0.7->langchain-openai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2024.7.24)\n",
      "Requirement already satisfied: shellingham>=1.3.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from typer>=0.9.0->qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.5.4)\n",
      "Requirement already satisfied: aiofiles<23,>=22.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ypy-websocket<0.9.0,>=0.8.2->jupyter-server-ydoc~=0.8.0->jupyterlab<4,>=3.5->jupyter-ai[all]) (22.1.0)\n",
      "Requirement already satisfied: cffi>=1.0.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from argon2-cffi-bindings->argon2-cffi>=21.1->jupyter-server<3,>=1.6->jupyter-ai[all]) (1.16.0)\n",
      "Requirement already satisfied: soupsieve>1.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from beautifulsoup4->nbconvert>=6.4.4->jupyter-server<3,>=1.6->jupyter-ai[all]) (2.5)\n",
      "Requirement already satisfied: debugpy>=1.6.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from ipykernel->notebook<7->jupyterlab<4,>=3.5->jupyter-ai[all]) (1.8.2)\n",
      "Requirement already satisfied: executing>=1.2.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from stack-data->ipython->jupyterlab<4,>=3.5->jupyter-ai[all]) (2.0.1)\n",
      "Requirement already satisfied: asttokens>=2.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from stack-data->ipython->jupyterlab<4,>=3.5->jupyter-ai[all]) (2.4.1)\n",
      "Requirement already satisfied: pure-eval in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from stack-data->ipython->jupyterlab<4,>=3.5->jupyter-ai[all]) (0.2.3)\n",
      "Requirement already satisfied: pycparser in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi>=21.1->jupyter-server<3,>=1.6->jupyter-ai[all]) (2.22)\n",
      "Requirement already satisfied: googleapis-common-protos<2.0.dev0,>=1.56.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from google-api-core->google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.65.0)\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from google-auth>=2.15.0->google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.4.1)\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from google-auth>=2.15.0->google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (4.7.2)\n",
      "Requirement already satisfied: mdurl~=0.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich>=13.0.0->qianfan->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.1.2)\n",
      "Requirement already satisfied: docker in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (7.1.0)\n",
      "Requirement already satisfied: google-pasta in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.2.0)\n",
      "Requirement already satisfied: pathos in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.3.2)\n",
      "Requirement already satisfied: sagemaker-core<2.0.0,>=1.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.0.4)\n",
      "Requirement already satisfied: sagemaker-mlflow in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.1.0)\n",
      "Requirement already satisfied: schema in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.7.7)\n",
      "Requirement already satisfied: smdebug-rulesconfig==1.0.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.0.1)\n",
      "Requirement already satisfied: mypy-extensions>=0.3.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from typing-inspect<1,>=0.4.0->dataclasses-json<0.7,>=0.5.7->langchain-community<0.3.0,>=0.1.0->jupyter-ai-magics->jupyter-ai[all]) (1.0.0)\n",
      "Requirement already satisfied: httplib2<1.dev0,>=0.19.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from google-api-python-client->google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.22.0)\n",
      "Requirement already satisfied: google-auth-httplib2<1.0.0,>=0.2.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from google-api-python-client->google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.2.0)\n",
      "Requirement already satisfied: uritemplate<5,>=3.0.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from google-api-python-client->google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (4.1.1)\n",
      "Requirement already satisfied: arrow>=0.15.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from isoduration->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (1.3.0)\n",
      "Requirement already satisfied: types-python-dateutil>=2.8.10 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from arrow>=0.15.0->isoduration->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server<3,>=1.6->jupyter-ai[all]) (2.9.0.20240316)\n",
      "Requirement already satisfied: grpcio<2.0dev,>=1.33.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-ai-generativelanguage==0.6.6->google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.66.2)\n",
      "Requirement already satisfied: grpcio-status<2.0.dev0,>=1.33.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-ai-generativelanguage==0.6.6->google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.62.3)\n",
      "Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from httplib2<1.dev0,>=0.19.0->google-api-python-client->google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (3.1.2)\n",
      "Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth>=2.15.0->google-generativeai<0.8.0,>=0.7.0->langchain-google-genai->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.6.1)\n",
      "Requirement already satisfied: mock<5.0,>4.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from sagemaker-core<2.0.0,>=1.0.0->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (4.0.3)\n",
      "Requirement already satisfied: ppft>=1.7.6.8 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from pathos->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.7.6.8)\n",
      "Requirement already satisfied: pox>=0.3.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from pathos->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.3.4)\n",
      "Requirement already satisfied: mlflow>=2.8 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2.17.0)\n",
      "Requirement already satisfied: mlflow-skinny==2.17.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2.17.0)\n",
      "Requirement already satisfied: Flask<4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (3.0.3)\n",
      "Requirement already satisfied: alembic!=1.10.0,<2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.13.3)\n",
      "Requirement already satisfied: graphene<4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (3.3)\n",
      "Requirement already satisfied: markdown<4,>=3.3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (3.7)\n",
      "Requirement already satisfied: matplotlib<4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (3.8.4)\n",
      "Requirement already satisfied: scikit-learn<2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.5.1)\n",
      "Requirement already satisfied: scipy<2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.14.0)\n",
      "Requirement already satisfied: gunicorn<24 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (23.0.0)\n",
      "Requirement already satisfied: databricks-sdk<1,>=0.20.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from mlflow-skinny==2.17.0->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.34.0)\n",
      "Requirement already satisfied: gitpython<4,>=3.1.9 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from mlflow-skinny==2.17.0->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (3.1.43)\n",
      "Requirement already satisfied: opentelemetry-api<3,>=1.9.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from mlflow-skinny==2.17.0->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.27.0)\n",
      "Requirement already satisfied: opentelemetry-sdk<3,>=1.9.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from mlflow-skinny==2.17.0->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.27.0)\n",
      "Requirement already satisfied: sqlparse<1,>=0.4.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from mlflow-skinny==2.17.0->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.5.1)\n",
      "Requirement already satisfied: Mako in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from alembic!=1.10.0,<2->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.3.5)\n",
      "Requirement already satisfied: Werkzeug>=3.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from Flask<4->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (3.0.3)\n",
      "Requirement already satisfied: itsdangerous>=2.1.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from Flask<4->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (2.2.0)\n",
      "Requirement already satisfied: blinker>=1.6.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from Flask<4->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.8.2)\n",
      "Requirement already satisfied: graphql-core<3.3,>=3.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from graphene<4->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (3.2.5)\n",
      "Requirement already satisfied: graphql-relay<3.3,>=3.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from graphene<4->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (3.2.0)\n",
      "Requirement already satisfied: aniso8601<10,>=8 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from graphene<4->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (9.0.1)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from matplotlib<4->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.2.1)\n",
      "Requirement already satisfied: cycler>=0.10 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from matplotlib<4->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from matplotlib<4->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (4.53.1)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from matplotlib<4->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.4.5)\n",
      "Requirement already satisfied: joblib>=1.2.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from scikit-learn<2->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from scikit-learn<2->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (3.5.0)\n",
      "Requirement already satisfied: gitdb<5,>=4.0.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from gitpython<4,>=3.1.9->mlflow-skinny==2.17.0->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (4.0.11)\n",
      "Requirement already satisfied: deprecated>=1.2.6 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from opentelemetry-api<3,>=1.9.0->mlflow-skinny==2.17.0->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.2.14)\n",
      "Requirement already satisfied: opentelemetry-semantic-conventions==0.48b0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from opentelemetry-sdk<3,>=1.9.0->mlflow-skinny==2.17.0->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (0.48b0)\n",
      "Requirement already satisfied: wrapt<2,>=1.10 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from deprecated>=1.2.6->opentelemetry-api<3,>=1.9.0->mlflow-skinny==2.17.0->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (1.16.0)\n",
      "Requirement already satisfied: smmap<6,>=3.0.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages (from gitdb<5,>=4.0.1->gitpython<4,>=3.1.9->mlflow-skinny==2.17.0->mlflow>=2.8->sagemaker-mlflow->sagemaker<3.0.0,>=2.232.1->cohere<6.0,>=5.5.6->langchain-cohere->jupyter-ai-magics[all]; extra == \"all\"->jupyter-ai[all]) (5.0.1)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install jupyter-ai[all]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "b796ccfa-cc6c-4da3-9727-970e2711c11c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import boto3\n",
    "from botocore.exceptions import ClientError\n",
    "import json\n",
    "\n",
    "def get_secret(secret_name):\n",
    "    region_name = \"us-east-1\"\n",
    "\n",
    "    # Create a Secrets Manager client\n",
    "    session = boto3.session.Session()\n",
    "    client = session.client(\n",
    "        service_name='secretsmanager',\n",
    "        region_name=region_name\n",
    "    )\n",
    "\n",
    "    try:\n",
    "        get_secret_value_response = client.get_secret_value(\n",
    "            SecretId=secret_name\n",
    "        )\n",
    "    except ClientError as e:\n",
    "        raise e\n",
    "\n",
    "    secret = get_secret_value_response['SecretString']\n",
    "    \n",
    "    return json.loads(secret)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "f853742a-f4ad-4404-947c-b175467e4a7f",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ[\"OPENAI_API_KEY\"] = get_secret('openai2')['openai']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "d468c4d4-c54a-4fe4-843e-5edbe937af8f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The jupyter_ai_magics extension is already loaded. To reload it, use:\n",
      "  %reload_ext jupyter_ai_magics\n"
     ]
    }
   ],
   "source": [
    "%load_ext jupyter_ai_magics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "e01de065-ebaa-41ad-94c3-b2c93ae3abe1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "| Provider | Environment variable | Set? | Models |\n",
       "|----------|----------------------|------|--------|\n",
       "| `ai21` | `AI21_API_KEY` | <abbr title=\"You have not set this environment variable, so you cannot use this provider's models.\">❌</abbr> | <ul><li>`ai21:j1-large`</li><li>`ai21:j1-grande`</li><li>`ai21:j1-jumbo`</li><li>`ai21:j1-grande-instruct`</li><li>`ai21:j2-large`</li><li>`ai21:j2-grande`</li><li>`ai21:j2-jumbo`</li><li>`ai21:j2-grande-instruct`</li><li>`ai21:j2-jumbo-instruct`</li></ul> |\n",
       "| `bedrock` | Not applicable. | <abbr title=\"Not applicable\">N/A</abbr> | <ul><li>`bedrock:amazon.titan-text-express-v1`</li><li>`bedrock:amazon.titan-text-lite-v1`</li><li>`bedrock:amazon.titan-text-premier-v1:0`</li><li>`bedrock:ai21.j2-ultra-v1`</li><li>`bedrock:ai21.j2-mid-v1`</li><li>`bedrock:ai21.jamba-instruct-v1:0`</li><li>`bedrock:cohere.command-light-text-v14`</li><li>`bedrock:cohere.command-text-v14`</li><li>`bedrock:cohere.command-r-v1:0`</li><li>`bedrock:cohere.command-r-plus-v1:0`</li><li>`bedrock:meta.llama2-13b-chat-v1`</li><li>`bedrock:meta.llama2-70b-chat-v1`</li><li>`bedrock:meta.llama3-8b-instruct-v1:0`</li><li>`bedrock:meta.llama3-70b-instruct-v1:0`</li><li>`bedrock:meta.llama3-1-8b-instruct-v1:0`</li><li>`bedrock:meta.llama3-1-70b-instruct-v1:0`</li><li>`bedrock:meta.llama3-1-405b-instruct-v1:0`</li><li>`bedrock:mistral.mistral-7b-instruct-v0:2`</li><li>`bedrock:mistral.mixtral-8x7b-instruct-v0:1`</li><li>`bedrock:mistral.mistral-large-2402-v1:0`</li><li>`bedrock:mistral.mistral-large-2407-v1:0`</li></ul> |\n",
       "| `bedrock-chat` | Not applicable. | <abbr title=\"Not applicable\">N/A</abbr> | <ul><li>`bedrock-chat:amazon.titan-text-express-v1`</li><li>`bedrock-chat:amazon.titan-text-lite-v1`</li><li>`bedrock-chat:amazon.titan-text-premier-v1:0`</li><li>`bedrock-chat:anthropic.claude-v2`</li><li>`bedrock-chat:anthropic.claude-v2:1`</li><li>`bedrock-chat:anthropic.claude-instant-v1`</li><li>`bedrock-chat:anthropic.claude-3-sonnet-20240229-v1:0`</li><li>`bedrock-chat:anthropic.claude-3-haiku-20240307-v1:0`</li><li>`bedrock-chat:anthropic.claude-3-opus-20240229-v1:0`</li><li>`bedrock-chat:anthropic.claude-3-5-sonnet-20240620-v1:0`</li><li>`bedrock-chat:meta.llama2-13b-chat-v1`</li><li>`bedrock-chat:meta.llama2-70b-chat-v1`</li><li>`bedrock-chat:meta.llama3-8b-instruct-v1:0`</li><li>`bedrock-chat:meta.llama3-70b-instruct-v1:0`</li><li>`bedrock-chat:meta.llama3-1-8b-instruct-v1:0`</li><li>`bedrock-chat:meta.llama3-1-70b-instruct-v1:0`</li><li>`bedrock-chat:meta.llama3-1-405b-instruct-v1:0`</li><li>`bedrock-chat:mistral.mistral-7b-instruct-v0:2`</li><li>`bedrock-chat:mistral.mixtral-8x7b-instruct-v0:1`</li><li>`bedrock-chat:mistral.mistral-large-2402-v1:0`</li><li>`bedrock-chat:mistral.mistral-large-2407-v1:0`</li></ul> |\n",
       "| `bedrock-custom` | Not applicable. | <abbr title=\"Not applicable\">N/A</abbr> | Specify the ARN (Amazon Resource Name) of the custom/provisioned model as the model ID. For more information, see the [Amazon Bedrock model IDs documentation](https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html).\n",
       "\n",
       "The model provider must also be specified below. This is the provider of your foundation model *in lowercase*, e.g. `amazon`, `anthropic`, `meta`, or `mistral`. |\n",
       "| `anthropic` | `ANTHROPIC_API_KEY` | <abbr title=\"You have not set this environment variable, so you cannot use this provider's models.\">❌</abbr> | <ul><li>`anthropic:claude-v1`</li><li>`anthropic:claude-v1.0`</li><li>`anthropic:claude-v1.2`</li><li>`anthropic:claude-2`</li><li>`anthropic:claude-2.0`</li><li>`anthropic:claude-instant-v1`</li><li>`anthropic:claude-instant-v1.0`</li><li>`anthropic:claude-instant-v1.2`</li></ul> |\n",
       "| `anthropic-chat` | `ANTHROPIC_API_KEY` | <abbr title=\"You have not set this environment variable, so you cannot use this provider's models.\">❌</abbr> | <ul><li>`anthropic-chat:claude-2.0`</li><li>`anthropic-chat:claude-2.1`</li><li>`anthropic-chat:claude-instant-1.2`</li><li>`anthropic-chat:claude-3-opus-20240229`</li><li>`anthropic-chat:claude-3-sonnet-20240229`</li><li>`anthropic-chat:claude-3-haiku-20240307`</li><li>`anthropic-chat:claude-3-5-sonnet-20240620`</li></ul> |\n",
       "| `azure-chat-openai` | `AZURE_OPENAI_API_KEY` | <abbr title=\"You have not set this environment variable, so you cannot use this provider's models.\">❌</abbr> | This provider does not define a list of models. |\n",
       "| `cohere` | `COHERE_API_KEY` | <abbr title=\"You have not set this environment variable, so you cannot use this provider's models.\">❌</abbr> | <ul><li>`cohere:command`</li><li>`cohere:command-nightly`</li><li>`cohere:command-light`</li><li>`cohere:command-light-nightly`</li><li>`cohere:command-r-plus`</li><li>`cohere:command-r`</li></ul> |\n",
       "| `gemini` | `GOOGLE_API_KEY` | <abbr title=\"You have not set this environment variable, so you cannot use this provider's models.\">❌</abbr> | <ul><li>`gemini:gemini-1.5-pro`</li><li>`gemini:gemini-1.5-flash`</li><li>`gemini:gemini-1.0-pro`</li><li>`gemini:gemini-1.0-pro-001`</li><li>`gemini:gemini-1.0-pro-latest`</li><li>`gemini:gemini-1.0-pro-vision-latest`</li><li>`gemini:gemini-pro`</li><li>`gemini:gemini-pro-vision`</li></ul> |\n",
       "| `gpt4all` | Not applicable. | <abbr title=\"Not applicable\">N/A</abbr> | <ul><li>`gpt4all:ggml-gpt4all-j-v1.2-jazzy`</li><li>`gpt4all:ggml-gpt4all-j-v1.3-groovy`</li><li>`gpt4all:ggml-gpt4all-l13b-snoozy`</li><li>`gpt4all:mistral-7b-openorca.Q4_0`</li><li>`gpt4all:mistral-7b-instruct-v0.1.Q4_0`</li><li>`gpt4all:gpt4all-falcon-q4_0`</li><li>`gpt4all:wizardlm-13b-v1.2.Q4_0`</li><li>`gpt4all:nous-hermes-llama2-13b.Q4_0`</li><li>`gpt4all:gpt4all-13b-snoozy-q4_0`</li><li>`gpt4all:mpt-7b-chat-merges-q4_0`</li><li>`gpt4all:orca-mini-3b-gguf2-q4_0`</li><li>`gpt4all:starcoder-q4_0`</li><li>`gpt4all:rift-coder-v0-7b-q4_0`</li><li>`gpt4all:em_german_mistral_v01.Q4_0`</li></ul> |\n",
       "| `huggingface_hub` | `HUGGINGFACEHUB_API_TOKEN` | <abbr title=\"You have not set this environment variable, so you cannot use this provider's models.\">❌</abbr> | See [https://huggingface.co/models](https://huggingface.co/models) for a list of models. Pass a model's repository ID as the model ID; for example, `huggingface_hub:ExampleOwner/example-model`. |\n",
       "| `mistralai` | `MISTRAL_API_KEY` | <abbr title=\"You have not set this environment variable, so you cannot use this provider's models.\">❌</abbr> | <ul><li>`mistralai:open-mistral-7b`</li><li>`mistralai:open-mixtral-8x7b`</li><li>`mistralai:open-mixtral-8x22b`</li><li>`mistralai:mistral-small-latest`</li><li>`mistralai:mistral-medium-latest`</li><li>`mistralai:mistral-large-latest`</li><li>`mistralai:codestral-latest`</li></ul> |\n",
       "| `nvidia-chat` | `NVIDIA_API_KEY` | <abbr title=\"You have not set this environment variable, so you cannot use this provider's models.\">❌</abbr> | <ul><li>`nvidia-chat:playground_llama2_70b`</li><li>`nvidia-chat:playground_nemotron_steerlm_8b`</li><li>`nvidia-chat:playground_mistral_7b`</li><li>`nvidia-chat:playground_nv_llama2_rlhf_70b`</li><li>`nvidia-chat:playground_llama2_13b`</li><li>`nvidia-chat:playground_steerlm_llama_70b`</li><li>`nvidia-chat:playground_llama2_code_13b`</li><li>`nvidia-chat:playground_yi_34b`</li><li>`nvidia-chat:playground_mixtral_8x7b`</li><li>`nvidia-chat:playground_neva_22b`</li><li>`nvidia-chat:playground_llama2_code_34b`</li></ul> |\n",
       "| `ollama` | Not applicable. | <abbr title=\"Not applicable\">N/A</abbr> | See [https://www.ollama.com/library](https://www.ollama.com/library) for a list of models. Pass a model's name; for example, `deepseek-coder-v2`. |\n",
       "| `openai` | `OPENAI_API_KEY` | <abbr title=\"You have set this environment variable, so you can use this provider's models.\">✅</abbr> | <ul><li>`openai:babbage-002`</li><li>`openai:davinci-002`</li><li>`openai:gpt-3.5-turbo-instruct`</li></ul> |\n",
       "| `openai-chat` | `OPENAI_API_KEY` | <abbr title=\"You have set this environment variable, so you can use this provider's models.\">✅</abbr> | <ul><li>`openai-chat:gpt-3.5-turbo`</li><li>`openai-chat:gpt-3.5-turbo-0125`</li><li>`openai-chat:gpt-3.5-turbo-0301`</li><li>`openai-chat:gpt-3.5-turbo-0613`</li><li>`openai-chat:gpt-3.5-turbo-1106`</li><li>`openai-chat:gpt-3.5-turbo-16k`</li><li>`openai-chat:gpt-3.5-turbo-16k-0613`</li><li>`openai-chat:gpt-4`</li><li>`openai-chat:gpt-4-turbo`</li><li>`openai-chat:gpt-4-turbo-preview`</li><li>`openai-chat:gpt-4-0613`</li><li>`openai-chat:gpt-4-32k`</li><li>`openai-chat:gpt-4-32k-0613`</li><li>`openai-chat:gpt-4-0125-preview`</li><li>`openai-chat:gpt-4-1106-preview`</li><li>`openai-chat:gpt-4o`</li><li>`openai-chat:gpt-4o-mini`</li></ul> |\n",
       "| `openrouter` | `OPENROUTER_API_KEY` | <abbr title=\"You have not set this environment variable, so you cannot use this provider's models.\">❌</abbr> | This provider does not define a list of models. |\n",
       "| `qianfan` | `QIANFAN_AK`, `QIANFAN_SK` | <abbr title=\"You have not set all of these environment variables, so you cannot use this provider's models.\">❌</abbr> | <ul><li>`qianfan:ERNIE-Bot`</li><li>`qianfan:ERNIE-Bot-4`</li></ul> |\n",
       "| `sagemaker-endpoint` | Not applicable. | <abbr title=\"Not applicable\">N/A</abbr> | Specify an endpoint name as the model ID. In addition, you must specify a region name, request schema, and response path. For more information, see the documentation about [SageMaker endpoints deployment](https://docs.aws.amazon.com/sagemaker/latest/dg/realtime-endpoints-deploy-models.html) and about [using magic commands with SageMaker endpoints](https://jupyter-ai.readthedocs.io/en/latest/users/index.html#using-magic-commands-with-sagemaker-endpoints). |\n",
       "| `togetherai` | `TOGETHER_API_KEY` | <abbr title=\"You have not set this environment variable, so you cannot use this provider's models.\">❌</abbr> | <ul><li>`togetherai:Austism/chronos-hermes-13b`</li><li>`togetherai:DiscoResearch/DiscoLM-mixtral-8x7b-v2`</li><li>`togetherai:EleutherAI/llemma_7b`</li><li>`togetherai:Gryphe/MythoMax-L2-13b`</li><li>`togetherai:Meta-Llama/Llama-Guard-7b`</li><li>`togetherai:Nexusflow/NexusRaven-V2-13B`</li><li>`togetherai:NousResearch/Nous-Capybara-7B-V1p9`</li><li>`togetherai:NousResearch/Nous-Hermes-2-Yi-34B`</li><li>`togetherai:NousResearch/Nous-Hermes-Llama2-13b`</li><li>`togetherai:NousResearch/Nous-Hermes-Llama2-70b`</li></ul> |\n",
       "\n",
       "Aliases and custom commands:\n",
       "\n",
       "| Name | Target |\n",
       "|------|--------|\n",
       "| `gpt2` | `huggingface_hub:gpt2` |\n",
       "| `gpt3` | `openai:davinci-002` |\n",
       "| `chatgpt` | `openai-chat:gpt-3.5-turbo` |\n",
       "| `gpt4` | `openai-chat:gpt-4` |\n",
       "| `ernie-bot` | `qianfan:ERNIE-Bot` |\n",
       "| `ernie-bot-4` | `qianfan:ERNIE-Bot-4` |\n",
       "| `titan` | `bedrock:amazon.titan-tg1-large` |\n",
       "| `openrouter-claude` | `openrouter:anthropic/claude-3.5-sonnet:beta` |\n"
      ],
      "text/plain": [
       "ai21\n",
       "Requires environment variable: AI21_API_KEY (not set)\n",
       "* ai21:j1-large\n",
       "* ai21:j1-grande\n",
       "* ai21:j1-jumbo\n",
       "* ai21:j1-grande-instruct\n",
       "* ai21:j2-large\n",
       "* ai21:j2-grande\n",
       "* ai21:j2-jumbo\n",
       "* ai21:j2-grande-instruct\n",
       "* ai21:j2-jumbo-instruct\n",
       "\n",
       "bedrock\n",
       "* bedrock:amazon.titan-text-express-v1\n",
       "* bedrock:amazon.titan-text-lite-v1\n",
       "* bedrock:amazon.titan-text-premier-v1:0\n",
       "* bedrock:ai21.j2-ultra-v1\n",
       "* bedrock:ai21.j2-mid-v1\n",
       "* bedrock:ai21.jamba-instruct-v1:0\n",
       "* bedrock:cohere.command-light-text-v14\n",
       "* bedrock:cohere.command-text-v14\n",
       "* bedrock:cohere.command-r-v1:0\n",
       "* bedrock:cohere.command-r-plus-v1:0\n",
       "* bedrock:meta.llama2-13b-chat-v1\n",
       "* bedrock:meta.llama2-70b-chat-v1\n",
       "* bedrock:meta.llama3-8b-instruct-v1:0\n",
       "* bedrock:meta.llama3-70b-instruct-v1:0\n",
       "* bedrock:meta.llama3-1-8b-instruct-v1:0\n",
       "* bedrock:meta.llama3-1-70b-instruct-v1:0\n",
       "* bedrock:meta.llama3-1-405b-instruct-v1:0\n",
       "* bedrock:mistral.mistral-7b-instruct-v0:2\n",
       "* bedrock:mistral.mixtral-8x7b-instruct-v0:1\n",
       "* bedrock:mistral.mistral-large-2402-v1:0\n",
       "* bedrock:mistral.mistral-large-2407-v1:0\n",
       "\n",
       "bedrock-chat\n",
       "* bedrock-chat:amazon.titan-text-express-v1\n",
       "* bedrock-chat:amazon.titan-text-lite-v1\n",
       "* bedrock-chat:amazon.titan-text-premier-v1:0\n",
       "* bedrock-chat:anthropic.claude-v2\n",
       "* bedrock-chat:anthropic.claude-v2:1\n",
       "* bedrock-chat:anthropic.claude-instant-v1\n",
       "* bedrock-chat:anthropic.claude-3-sonnet-20240229-v1:0\n",
       "* bedrock-chat:anthropic.claude-3-haiku-20240307-v1:0\n",
       "* bedrock-chat:anthropic.claude-3-opus-20240229-v1:0\n",
       "* bedrock-chat:anthropic.claude-3-5-sonnet-20240620-v1:0\n",
       "* bedrock-chat:meta.llama2-13b-chat-v1\n",
       "* bedrock-chat:meta.llama2-70b-chat-v1\n",
       "* bedrock-chat:meta.llama3-8b-instruct-v1:0\n",
       "* bedrock-chat:meta.llama3-70b-instruct-v1:0\n",
       "* bedrock-chat:meta.llama3-1-8b-instruct-v1:0\n",
       "* bedrock-chat:meta.llama3-1-70b-instruct-v1:0\n",
       "* bedrock-chat:meta.llama3-1-405b-instruct-v1:0\n",
       "* bedrock-chat:mistral.mistral-7b-instruct-v0:2\n",
       "* bedrock-chat:mistral.mixtral-8x7b-instruct-v0:1\n",
       "* bedrock-chat:mistral.mistral-large-2402-v1:0\n",
       "* bedrock-chat:mistral.mistral-large-2407-v1:0\n",
       "\n",
       "bedrock-custom\n",
       "* Specify the ARN (Amazon Resource Name) of the custom/provisioned model as the model ID. For more information, see the [Amazon Bedrock model IDs documentation](https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html).\n",
       "\n",
       "The model provider must also be specified below. This is the provider of your foundation model *in lowercase*, e.g. `amazon`, `anthropic`, `meta`, or `mistral`.\n",
       "\n",
       "anthropic\n",
       "Requires environment variable: ANTHROPIC_API_KEY (not set)\n",
       "* anthropic:claude-v1\n",
       "* anthropic:claude-v1.0\n",
       "* anthropic:claude-v1.2\n",
       "* anthropic:claude-2\n",
       "* anthropic:claude-2.0\n",
       "* anthropic:claude-instant-v1\n",
       "* anthropic:claude-instant-v1.0\n",
       "* anthropic:claude-instant-v1.2\n",
       "\n",
       "anthropic-chat\n",
       "Requires environment variable: ANTHROPIC_API_KEY (not set)\n",
       "* anthropic-chat:claude-2.0\n",
       "* anthropic-chat:claude-2.1\n",
       "* anthropic-chat:claude-instant-1.2\n",
       "* anthropic-chat:claude-3-opus-20240229\n",
       "* anthropic-chat:claude-3-sonnet-20240229\n",
       "* anthropic-chat:claude-3-haiku-20240307\n",
       "* anthropic-chat:claude-3-5-sonnet-20240620\n",
       "\n",
       "azure-chat-openai\n",
       "Requires environment variable: AZURE_OPENAI_API_KEY (not set)\n",
       "* This provider does not define a list of models.\n",
       "\n",
       "cohere\n",
       "Requires environment variable: COHERE_API_KEY (not set)\n",
       "* cohere:command\n",
       "* cohere:command-nightly\n",
       "* cohere:command-light\n",
       "* cohere:command-light-nightly\n",
       "* cohere:command-r-plus\n",
       "* cohere:command-r\n",
       "\n",
       "gemini\n",
       "Requires environment variable: GOOGLE_API_KEY (not set)\n",
       "* gemini:gemini-1.5-pro\n",
       "* gemini:gemini-1.5-flash\n",
       "* gemini:gemini-1.0-pro\n",
       "* gemini:gemini-1.0-pro-001\n",
       "* gemini:gemini-1.0-pro-latest\n",
       "* gemini:gemini-1.0-pro-vision-latest\n",
       "* gemini:gemini-pro\n",
       "* gemini:gemini-pro-vision\n",
       "\n",
       "gpt4all\n",
       "* gpt4all:ggml-gpt4all-j-v1.2-jazzy\n",
       "* gpt4all:ggml-gpt4all-j-v1.3-groovy\n",
       "* gpt4all:ggml-gpt4all-l13b-snoozy\n",
       "* gpt4all:mistral-7b-openorca.Q4_0\n",
       "* gpt4all:mistral-7b-instruct-v0.1.Q4_0\n",
       "* gpt4all:gpt4all-falcon-q4_0\n",
       "* gpt4all:wizardlm-13b-v1.2.Q4_0\n",
       "* gpt4all:nous-hermes-llama2-13b.Q4_0\n",
       "* gpt4all:gpt4all-13b-snoozy-q4_0\n",
       "* gpt4all:mpt-7b-chat-merges-q4_0\n",
       "* gpt4all:orca-mini-3b-gguf2-q4_0\n",
       "* gpt4all:starcoder-q4_0\n",
       "* gpt4all:rift-coder-v0-7b-q4_0\n",
       "* gpt4all:em_german_mistral_v01.Q4_0\n",
       "\n",
       "huggingface_hub\n",
       "Requires environment variable: HUGGINGFACEHUB_API_TOKEN (not set)\n",
       "* See [https://huggingface.co/models](https://huggingface.co/models) for a list of models. Pass a model's repository ID as the model ID; for example, `huggingface_hub:ExampleOwner/example-model`.\n",
       "\n",
       "mistralai\n",
       "Requires environment variable: MISTRAL_API_KEY (not set)\n",
       "* mistralai:open-mistral-7b\n",
       "* mistralai:open-mixtral-8x7b\n",
       "* mistralai:open-mixtral-8x22b\n",
       "* mistralai:mistral-small-latest\n",
       "* mistralai:mistral-medium-latest\n",
       "* mistralai:mistral-large-latest\n",
       "* mistralai:codestral-latest\n",
       "\n",
       "nvidia-chat\n",
       "Requires environment variable: NVIDIA_API_KEY (not set)\n",
       "* nvidia-chat:playground_llama2_70b\n",
       "* nvidia-chat:playground_nemotron_steerlm_8b\n",
       "* nvidia-chat:playground_mistral_7b\n",
       "* nvidia-chat:playground_nv_llama2_rlhf_70b\n",
       "* nvidia-chat:playground_llama2_13b\n",
       "* nvidia-chat:playground_steerlm_llama_70b\n",
       "* nvidia-chat:playground_llama2_code_13b\n",
       "* nvidia-chat:playground_yi_34b\n",
       "* nvidia-chat:playground_mixtral_8x7b\n",
       "* nvidia-chat:playground_neva_22b\n",
       "* nvidia-chat:playground_llama2_code_34b\n",
       "\n",
       "ollama\n",
       "* See [https://www.ollama.com/library](https://www.ollama.com/library) for a list of models. Pass a model's name; for example, `deepseek-coder-v2`.\n",
       "\n",
       "openai\n",
       "Requires environment variable: OPENAI_API_KEY (set)\n",
       "* openai:babbage-002\n",
       "* openai:davinci-002\n",
       "* openai:gpt-3.5-turbo-instruct\n",
       "\n",
       "openai-chat\n",
       "Requires environment variable: OPENAI_API_KEY (set)\n",
       "* openai-chat:gpt-3.5-turbo\n",
       "* openai-chat:gpt-3.5-turbo-0125\n",
       "* openai-chat:gpt-3.5-turbo-0301\n",
       "* openai-chat:gpt-3.5-turbo-0613\n",
       "* openai-chat:gpt-3.5-turbo-1106\n",
       "* openai-chat:gpt-3.5-turbo-16k\n",
       "* openai-chat:gpt-3.5-turbo-16k-0613\n",
       "* openai-chat:gpt-4\n",
       "* openai-chat:gpt-4-turbo\n",
       "* openai-chat:gpt-4-turbo-preview\n",
       "* openai-chat:gpt-4-0613\n",
       "* openai-chat:gpt-4-32k\n",
       "* openai-chat:gpt-4-32k-0613\n",
       "* openai-chat:gpt-4-0125-preview\n",
       "* openai-chat:gpt-4-1106-preview\n",
       "* openai-chat:gpt-4o\n",
       "* openai-chat:gpt-4o-mini\n",
       "\n",
       "openrouter\n",
       "Requires environment variable: OPENROUTER_API_KEY (not set)\n",
       "* This provider does not define a list of models.\n",
       "\n",
       "qianfan\n",
       "Requires environment variables: QIANFAN_AK (not set), QIANFAN_SK (not set)\n",
       "* qianfan:ERNIE-Bot\n",
       "* qianfan:ERNIE-Bot-4\n",
       "\n",
       "sagemaker-endpoint\n",
       "* Specify an endpoint name as the model ID. In addition, you must specify a region name, request schema, and response path. For more information, see the documentation about [SageMaker endpoints deployment](https://docs.aws.amazon.com/sagemaker/latest/dg/realtime-endpoints-deploy-models.html) and about [using magic commands with SageMaker endpoints](https://jupyter-ai.readthedocs.io/en/latest/users/index.html#using-magic-commands-with-sagemaker-endpoints).\n",
       "\n",
       "togetherai\n",
       "Requires environment variable: TOGETHER_API_KEY (not set)\n",
       "* togetherai:Austism/chronos-hermes-13b\n",
       "* togetherai:DiscoResearch/DiscoLM-mixtral-8x7b-v2\n",
       "* togetherai:EleutherAI/llemma_7b\n",
       "* togetherai:Gryphe/MythoMax-L2-13b\n",
       "* togetherai:Meta-Llama/Llama-Guard-7b\n",
       "* togetherai:Nexusflow/NexusRaven-V2-13B\n",
       "* togetherai:NousResearch/Nous-Capybara-7B-V1p9\n",
       "* togetherai:NousResearch/Nous-Hermes-2-Yi-34B\n",
       "* togetherai:NousResearch/Nous-Hermes-Llama2-13b\n",
       "* togetherai:NousResearch/Nous-Hermes-Llama2-70b\n",
       "\n",
       "\n",
       "Aliases and custom commands:\n",
       "gpt2 - huggingface_hub:gpt2\n",
       "gpt3 - openai:davinci-002\n",
       "chatgpt - openai-chat:gpt-3.5-turbo\n",
       "gpt4 - openai-chat:gpt-4\n",
       "ernie-bot - qianfan:ERNIE-Bot\n",
       "ernie-bot-4 - qianfan:ERNIE-Bot-4\n",
       "titan - bedrock:amazon.titan-tg1-large\n",
       "openrouter-claude - openrouter:anthropic/claude-3.5-sonnet:beta\n"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%ai list "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "f6fc70e3-7025-4cb7-b9c3-dafeda934305",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "The dataframe consists of 982,638 rows and 28 columns. Here is a brief overview of each column:\n",
       "\n",
       "1. `DR_NO`: This appears to be some type of unique identifier or case number.\n",
       "2. `Date Rptd`: The date the incident was reported.\n",
       "3. `DATE OCC`: The date the incident occurred.\n",
       "4. `TIME OCC`: The time the incident occurred.\n",
       "5. `AREA`: A numerical code representing the area where the incident occurred.\n",
       "6. `AREA NAME`: The name of the area where the incident occurred.\n",
       "7. `Rpt Dist No`: The reporting district number.\n",
       "8. `Part 1-2`: A categorization variable; specifics unknown without further context.\n",
       "9. `Crm Cd`: A numerical code representing the type of crime.\n",
       "10. `Crm Cd Desc`: A description of the type of crime.\n",
       "11. `Mocodes`: Modus operandi codes; specifics unknown without further context.\n",
       "12. `Vict Age`: The age of the victim.\n",
       "13. `Vict Sex`: The sex of the victim.\n",
       "14. `Vict Descent`: The descent or ethnicity of the victim.\n",
       "15. `Premis Cd`: A numerical code representing the type of location where the incident occurred.\n",
       "16. `Premis Desc`: A description of the location where the incident occurred.\n",
       "17. `Weapon Used Cd`: A numerical code representing the type of weapon used, if any.\n",
       "18. `Weapon Desc`: A description of the weapon used, if any.\n",
       "19. `Status`: A code representing the status of the case.\n",
       "20. `Status Desc`: A description of the status of the case.\n",
       "21. `Crm Cd 1`: A crime code; specifics unknown without further context.\n",
       "22. `Crm Cd 2`: Another crime code; specifics unknown without further context.\n",
       "23. `Crm Cd 3`: A third crime code; specifics unknown without further context.\n",
       "24. `Crm Cd 4`: A fourth crime code; specifics unknown without further context.\n",
       "25. `LOCATION`: The specific location where the incident occurred.\n",
       "26. `Cross Street`: The cross street or nearest cross street to where the incident occurred.\n",
       "27. `LAT`: The latitude coordinate of the location.\n",
       "28. `LON`: The longitude coordinate of the location."
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "execution_count": 84,
     "metadata": {
      "text/markdown": {
       "jupyter_ai": {
        "model_id": "gpt-4",
        "provider_id": "openai-chat"
       }
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%ai gpt4\n",
    "\n",
    "what is in the dataframe of {df}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "c5264024-0e0d-4847-8c4f-f14588b6b87b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "AI generated code inserted below &#11015;&#65039;"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 85,
     "metadata": {
      "text/html": {
       "jupyter_ai": {
        "model_id": "gpt-4",
        "provider_id": "openai-chat"
       }
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%ai gpt4 -f code\n",
    "\n",
    "clean the data in the dataframe {df}, convert the 'date occ' to a date format "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bfe1e7dc-6b4e-4426-a8d7-1381e0e9d625",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert 'DATE OCC' column to datetime\n",
    "df['DATE OCC'] = pd.to_datetime(df['DATE OCC'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "4df10118-4263-4f98-827e-afde261134a2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Assuming df is the dataframe\n",
    "df['DATE OCC'] = pd.to_datetime(df['DATE OCC'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "5da95c10-ce6a-4ed7-a5b9-1ae746cefb2e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "AI generated code inserted below &#11015;&#65039;"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 87,
     "metadata": {
      "text/html": {
       "jupyter_ai": {
        "model_id": "gpt-4",
        "provider_id": "openai-chat"
       }
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%ai gpt4 -f code\n",
    "\n",
    "count the numner of incidents in different year, with the data in the dataframe {df}, show the result on a line chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f51a1abe-ea48-4915-a7aa-74f4b9b44fd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Extract the year from 'DATE OCC' and count the number of incidents per year\n",
    "incidents_per_year = df['DATE OCC'].dt.year.value_counts().sort_index()\n",
    "\n",
    "# Plot the data\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.plot(incidents_per_year.index, incidents_per_year.values)\n",
    "plt.title('Number of Incidents per Year')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Number of Incidents')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "371dc5d7-2e4a-4b9f-822e-a6b2b5a1860a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Create a new column with just the year of the incident\n",
    "df['Year'] = df['DATE OCC'].dt.year\n",
    "\n",
    "# Count the number of incidents for each year\n",
    "yearly_counts = df['Year'].value_counts().sort_index()\n",
    "\n",
    "# Plot the counts\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(yearly_counts.index, yearly_counts.values, marker='o')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Number of Incidents')\n",
    "plt.title('Number of Incidents Per Year')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "d79f1e55-66c1-47e7-ac00-4646ec1b7127",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Create a new column with just the year of the incident\n",
    "df['Year'] = df['DATE OCC'].dt.year\n",
    "\n",
    "# Count the number of incidents for each year\n",
    "yearly_counts = df['Year'].value_counts().sort_index()\n",
    "\n",
    "# Plot the counts\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(yearly_counts.index, yearly_counts.values, marker='o')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Number of Incidents')\n",
    "plt.title('Number of Incidents Per Year')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "f234e813-4ed5-4ccf-8c0a-1e05e423f7c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "AI generated code inserted below &#11015;&#65039;"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 90,
     "metadata": {
      "text/html": {
       "jupyter_ai": {
        "model_id": "gpt-4",
        "provider_id": "openai-chat"
       }
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%ai gpt4 -f code\n",
    "\n",
    "count the number of deaths in different years, with the data in the dataframe {df}, show the result on a line chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5bb9489-d038-4528-856a-0759309c7d3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filter dataframe to include only rows where 'Crm Cd Desc' column contains the word 'DEATH'\n",
    "deaths_df = df[df['Crm Cd Desc'].str.contains('DEATH', na=False)]\n",
    "\n",
    "# Count the number of deaths per year\n",
    "deaths_per_year = deaths_df['DATE OCC'].dt.year.value_counts().sort_index()\n",
    "\n",
    "# Plot the data\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.plot(deaths_per_year.index, deaths_per_year.values)\n",
    "plt.title('Number of Deaths per Year')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Number of Deaths')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "9e77f2f8-572d-4623-8473-5056f3cdf07a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Create a new column with just the year of the incident\n",
    "df['Year'] = df['DATE OCC'].dt.year\n",
    "\n",
    "# Count the number of incidents for each year\n",
    "yearly_counts = df['Year'].value_counts().sort_index()\n",
    "\n",
    "# Plot the counts\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(yearly_counts.index, yearly_counts.values, marker='o')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Number of Incidents')\n",
    "plt.title('Number of Incidents Per Year')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85fdf1f2-03f0-42ed-a6e5-5c774678593b",
   "metadata": {},
   "source": [
    "# In this data sequence, the data starts at 2020 with 200,000 incidents. It steadily increased to rougly 235,000 incidents by the end of 2022. We are currently still in 2024 but since 2022, incident numbers have decreased tremendously to only roughly 112,000 incidents. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "7d6ce8d5-bfb4-48b2-a140-4bbcdf095032",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Filter data to only include incidents with 'Crm Cd Desc' indicating a death\n",
    "deaths_df = df[df['Crm Cd Desc'].str.contains('DEATH', na=False)]\n",
    "\n",
    "# Count the number of deaths for each year\n",
    "yearly_death_counts = deaths_df['Year'].value_counts().sort_index()\n",
    "\n",
    "# Plot the counts\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(yearly_death_counts.index, yearly_death_counts.values, marker='o')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Number of Deaths')\n",
    "plt.title('Number of Deaths Per Year')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "f520a46a-471a-4b9b-8d51-1c9ef12da427",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "AI generated code inserted below &#11015;&#65039;"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 93,
     "metadata": {
      "text/html": {
       "jupyter_ai": {
        "model_id": "gpt-4",
        "provider_id": "openai-chat"
       }
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%ai gpt4 -f code\n",
    "\n",
    "count the numner of area names in different year, with the data in the dataframe {df} showing male , show the result on a line chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b6246d8-b342-409c-898a-7f4251775e08",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filter dataframe to include only rows where 'Vict Sex' column is 'M' (male)\n",
    "male_df = df[df['Vict Sex'] == 'M']\n",
    "\n",
    "# Count the number of male incidents per area per year\n",
    "male_incidents_per_area_year = male_df.groupby([male_df['DATE OCC'].dt.year, 'AREA NAME']).size().unstack()\n",
    "\n",
    "# Plot the data\n",
    "male_incidents_per_area_year.plot(kind='line', figsize=(12,8))\n",
    "plt.title('Number of Male Incidents per Area per Year')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Number of Incidents')\n",
    "plt.grid(True)\n",
    "plt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "1d1bd83d-3528-4044-a7a6-1d415081db77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkYAAAHFCAYAAAAXETaHAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOydd3wUVfeHn9m+m2w2PSGUhN4RBKUKFkAERH8W9EWxYMEuKoq++toVsXfBBmLDXrBQbPjyglRBeu9JSN9N235/f8xmk02BBBI2CfeB/czsnbszZ2Y3O98995xzFSGEQCKRSCQSiUSCJtwGSCQSiUQikTQWpDCSSCQSiUQiCSCFkUQikUgkEkkAKYwkEolEIpFIAkhhJJFIJBKJRBJACiOJRCKRSCSSAFIYSSQSiUQikQSQwkgikUgkEokkgBRGEolEIpFIJAGkMDpJmTNnDoqiYDKZ2LdvX5XtZ555Jj169AiDZfDHH3+gKApffvllWI5fV/bu3cuYMWOIjY1FURSmTJlSY9+0tDQUReHMM8+sdvvcuXNRFAVFUfjjjz/qbEvZtTuW19aEoijcdttt9ba/yjz66KMoilKrvmlpaVxzzTUNZgvATz/9xKOPPlqv+6xvu8v+fmt61Of7X5FrrrmGyMjIetnXqaeeiqIoPP/88/Wyv/pm7969IddUo9EQFxfH6NGjWb58eYMe+9Zbb0Wv17N27doq29xuNz179qRDhw4UFxc3qB0nK7pwGyAJLy6Xi4ceeogPP/ww3KY0We666y5WrFjB+++/T3JyMi1atDhif6vVyp9//smuXbto3759yLb333+fqKgoHA5HQ5rcqLj++usZNWpUuM0I8tNPP/HGG2/Uqzj65ptviIqKqrf9lTF79my6dOlSpb1bt271fqz6ZN26dfz9998AvPfee0ydOjXMFtXM7bffzoQJE/D5fGzatInHHnuMs846i+XLl9OnT58GOeZzzz3H4sWLufrqq1mzZg0GgyG47dFHH2Xz5s38+eefRERENMjxT3akx+gkZ9SoUXzyySesX78+3KaccEpLS6mPqQI3btzI6aefzoUXXsiAAQNITU09Yv8hQ4bQsmVL3n///ZD2Xbt28eeff3LZZZcdt01NiVatWjFgwIBwm9Gg9OnTp4oIrg969OjBgAEDqjwaQoTVJ++++y4AY8aMYevWrSxbtqxWryspKWlIs6qlTZs2DBgwgMGDB3PjjTfy4Ycf4nK5ePPNN4973zWdj8Vi4YMPPmDLli088sgjwfZVq1bx7LPPMnXqVAYPHnzcxz8aQghKS0sb/DiNDSmMTnLuu+8+4uLimDZt2hH7lbmV58yZU2Wboighv67Lhkb++ecfLr30Umw2G7Gxsdx99914vV62bdvGqFGjsFqtpKWl8eyzz1Z7TKfTyd13301ycjJms5lhw4YFf2VWZPXq1YwbN47Y2FhMJhN9+vTh888/D+lTNvSwaNEiJk2aREJCAhaLBZfLVeM579+/nyuvvJLExESMRiNdu3blhRdewO/3A+XDVjt37uTnn38Outz37t17xGup0Wi46qqr+OCDD4L7AtVb1Lp1a4YPH17tOV5++eWkpaVhNptJS0vjX//6V7XDoNVRm2tUW8rO+9NPP+XBBx8kJSWFqKgohg8fzrZt26r0X7BgAeeccw42mw2LxULXrl2ZPn16cHt1Q2kej4f77ruP5ORkLBYLQ4YMYeXKldXak5mZyeTJk2nVqhUGg4G2bdvy2GOP4fV6g33KPr/PP/88L774Im3btiUyMpKBAwfy119/Bftdc801vPHGGwAhwyhl7+kXX3xB//79g+fSrl07Jk2adNRrVnkora7X8Hh44403GDp0KImJiURERNCzZ0+effZZPB5Plb5He6/K2LlzJ6NHjyYyMpLWrVtzzz33HPFvqSJOp5NPPvmEvn378tJLLwFU+ZEA5Z+LtWvXcskllxATExMUl0II3nzzTXr37o3ZbCYmJoZLLrmE3bt3h+xj8eLFXHDBBbRq1QqTyUSHDh2YPHkyOTk5tbK1OspEfMW/vV9++YVzzjmHqKgoLBYLgwcP5tdff631+VTHwIEDuffee3nuuedYsWIFLpeLa665hq5du/L4448DsGPHDiZMmBDyHVX2+S3D6XRyzz330Lt37+B38cCBA/nuu++qHLNs2HzmzJl07doVo9HIBx98cMzXqqkihdFJjtVq5aGHHmLhwoX89ttv9brv8ePHc8opp/DVV19xww038NJLL3HXXXdx4YUXMmbMGL755hvOPvtspk2bxtdff13l9f/+97/ZvXs37777Lu+++y7p6emceeaZIV9+v//+O4MHD6agoICZM2fy3Xff0bt3by677LJqRdykSZPQ6/V8+OGHfPnll+j1+mpt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0m3Ia3Q0Bg0ahM1mY+bMmVx++eW1/sItK3758ccf07dv32D7559/XiXQeezYsfz000+0b9++3tz/Fb02ZrO5xj7Dhg0jOjqahQsX8vfffzdKYVR2zSt+doQQvPPOOyH9jvW9qgsLFy7k4MGD3HrrrdV6WG677Tbmzp3L008/XWXItCJjx47lmWee4dChQ4wfP77GftWdO8CsWbOO8QyqMnjwYKKjo9m8eXODFkGtjMVi4ayzzuLvv/+mV69eIXWOKqMoCgaDIeQ9zczMbNDv7qaOFEaSEGbMmEHfvn3Jysqie/fuwfayMf3333+f9u3bc8opp7By5Uo++eSTBrMlKyuL//u//+OGG27AbrfzyCOPYDKZguPsoH7JnXfeeZx77rlcc801tGzZkry8PLZs2cLatWv54osvjunYd911F3PnzmXMmDE8/vjjpKam8uOPP/Lmm29y880306lTp3o5x969e/Ptt98esU9UVBRDhw7lueeeIz4+nrS0NJYsWcJ7770XjNM4Eg11jY5GZGQkL7zwAtdffz3Dhw/nhhtuICkpiZ07d7J+/Xpef/31al/XtWtXrrzySl5++WX0ej3Dhw9n48aNPP/881Xq8zz++OMsXryYQYMGcccdd9C5c2ecTid79+7lp59+YubMmXUeyuvZsyeg/i2cd955aLVaevXqxZNPPsnBgwc555xzaNWqFQUFBbzyyivo9XqGDRt2bBfpONm4cWO1WXHt27cnISGBESNGYDAY+Ne//sV9992H0+nkrbfeqpLdd6zvVV1477330Ol0/Pvf/67Wkzd58mTuuOMOfvzxRy644IIa91NWT+jaa69l9erVDB06lIiICDIyMli6dCk9e/bk5ptvpkuXLrRv3577778fIQSxsbHMnz+fxYsXH/e5lBEZGclrr73G1VdfTV5eHpdccgmJiYlkZ2ezfv16srOzeeutt+rteBV55ZVXGDJkCGeccQY333wzaWlpFBYWsnPnTubPnx+Mgxw7dixff/01t9xyC5dccgkHDhzgiSeeoEWLFuzYsaNBbGvqSGEkCaFPnz7861//qlbwvPDCCwA8++yzFBUVcfbZZ/PDDz/UGDB8vDz99NOsWrWKa6+9FofDwemnn868efNCan+cddZZrFy5kqeeeoopU6aQn59PXFwc3bp1O+KvyaORkJDAsmXLeOCBB3jggQdw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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Filter data to only include males\n",
    "male_df = df[df['Vict Sex'] == 'M']\n",
    "\n",
    "# Count the number of incidents in each area for each year\n",
    "area_counts_per_year = male_df.groupby(['Year', 'AREA NAME']).size().unstack()\n",
    "\n",
    "# Plot the results\n",
    "area_counts_per_year.plot(kind='line', legend=False)\n",
    "plt.title('Number of Male Incidents in Each Area Per Year')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Number of Incidents')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea84d8eb-5c81-4fbb-84a8-2dd8a38a1665",
   "metadata": {},
   "source": [
    "In this line graph sequence, it can be seen that the orange area code has overwhelmingly most number of incidents for the male population at 6000 in 2000 dipping down to 3,000 in 2024, while the brown area code can be seen with the least starting at roughly 3500 and dipping down to roughly 1000 by 2024."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "e761047e-9616-4299-ba84-3dae6e16585b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "AI generated code inserted below &#11015;&#65039;"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 95,
     "metadata": {
      "text/html": {
       "jupyter_ai": {
        "model_id": "gpt-4",
        "provider_id": "openai-chat"
       }
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%ai gpt4 -f code\n",
    "\n",
    "count the numner of area names in different year, with the data in the dataframe {df} showing female , show the result on a line chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "49dbd51d-c972-40cc-aa24-1a0b7cbf68e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filter dataframe to include only rows where 'Vict Sex' column is 'F' (female)\n",
    "female_df = df[df['Vict Sex'] == 'F']\n",
    "\n",
    "# Count the number of female incidents per area per year\n",
    "female_incidents_per_area_year = female_df.groupby([female_df['DATE OCC'].dt.year, 'AREA NAME']).size().unstack()\n",
    "\n",
    "# Plot the data\n",
    "female_incidents_per_area_year.plot(kind='line', figsize=(12,8))\n",
    "plt.title('Number of Female Incidents per Area per Year')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Number of Incidents')\n",
    "plt.grid(True)\n",
    "plt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "98becc6d-35b0-45d6-b821-1dca6110dafb",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Filter data to only include females\n",
    "female_df = df[df['Vict Sex'] == 'F']\n",
    "\n",
    "# Count the number of incidents in each area for each year\n",
    "area_counts_per_year = female_df.groupby(['Year', 'AREA NAME']).size().unstack()\n",
    "\n",
    "# Plot the results\n",
    "area_counts_per_year.plot(kind='line', legend=False)\n",
    "plt.title('Number of Female Incidents in Each Area Per Year')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Number of Incidents')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ad64f23-d9c9-4e12-af98-5d5a825c8e53",
   "metadata": {},
   "source": [
    "In this sequence, the "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_python3",
   "language": "python",
   "name": "conda_python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
